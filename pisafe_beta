#!/bin/bash

COPYRIGHT="By Richard Reed 2018 - 2021" 

# This script basically 
# 1- copies a media-device with 'dd'
# 2- shrinks the last partition with 'pishrink'
# 3- compresses with 'zip' 

# references
# https://www.raspberrypi.org/documentation/installation/installing-images/linux.md
# https://www.instructables.com/id/How-to-BackUp-and-Shrink-Your-Raspberry-Pi-Image/
# https://github.com/Drewsif/PiShrink

# https://jfearn.fedorapeople.org/fdocs/en-US/Documentation/0.1/html/Fedora_Multiboot_Guide/freespace-ntfs.html


SCRIPTNAME="${0##*/}"
SCRIPTVER="1.2.2"   # 2022/01/24
PRODUCTNAME="PiSafe"
PRODUCTCOMMENT="Raspberry Pi Imaging App"
PRODUCTHOME="https://github.com/RichardMidnight/pi-safe"
CURRENT_DIR=$(pwd)
USER=$(whoami)
CONFIG="/home/$USER/.config/pisafe/pisafe.conf"
LOG_FILE="/home/$USER/.config/pisafe/pisafe.log"
REQUIRED_TOOLS="bc pv whiptail pishrink.sh zip unzip pigz xz file"
INDEV=
OUTDEV=
INFILE=
OUTFILE=
BACKTITLE="$PRODUCTNAME ver $SCRIPTVER   === $PRODUCTCOMMENT === "
INTERFACE="cli"
LOG=on


WHITE='\033[1;37m'
RED='\033[1;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
LTBLUE='\033[1;34m'
NC='\033[0m' 		# No Color, standard text
echo_white()        { (echo -e "${WHITE}$*${NC}") }
echo_red()          { (echo -e "${RED}$*${NC}") }
echo_blue()         { (echo -e "${LTBLUE}$*${NC}") }  
echo_green()        { (echo -e "${GREEN}$*${NC}") }


desktop_environment_notes(){
    # this is just a reference of tested OSs from 2021

    DISTRO                      TERMINAL            TEXT EDITOR         
    RaspberryPiOS-stretch       lxterminal          leafpad?
    RaspberrypiOS-buster        lxterminal          mousepad
    Debian-GNOME                gnome-terminal      gedit
    Debian Xfce                 xfce4-terminal      mousepad
    Debian KDE Plasma           konsole             kwrite
    Debian Cinnamon             xterm / uxterm      gedit
    Debian MATE                 mate-terminal       pluma
    Debian LXDE                 lxterminal          mousepad
    Debian LXQt                 qterminal           featherpad
    ubuntu gnome                gnome-terminal      gedit
    lubuntu LXQt                qterminal           featherpad
    LMDE-4 Cinnamon             gnome-terminal      xed
    mint cinnamon               gnome-terminal      xed
    mint MATE                   mate-terminal       xed
    Mint Xfce                   xfce4-terminal      Xed

    bionic puppy    - ppm       lxterminal          geany 
    arch / manjaro  - pacman -S
    zorin - ubuntu based
    manjaro kde                 konsole             kate
    manjaro xfce                xfce-terminal       mousepad
    
    
    Tested with
    --- ARM ---
    Raspios Buster      good
    Raspbian Stretch    good
    Raspbian Jessy      can work with limitations
    Manjaro             good         
    Ubuntu              good
    Note: overlay filesystem cannot be turned on
    
    --- x86 ---
    debian Strech, Buster         no shrink, last is logical swap.
    RPD Buster                    no shrink, last is logical swap.
    mint  20.1                    no shrink, last is ext logical.
    LMDE 4                        good
    ubuntu                        good
    lubuntu                       good
}


run_command(){
    local CMD=$1
    local LINE=$2
    local QUIET=${3:-n}
    
    ui_echo "~ Running: $CMD" blue
    eval $CMD
    RC=$?
    if (( $RC )); then
        ui_error $LINENO "Error $RC running '$CMD'"
        return $RC
    fi
}


ui_log(){
    # usage ui_log "message"
    INFO=$*
    
    INFO=$(echo $INFO | sed 's/\\n/ -/g')  #change newline for ~
    
    if [[ $LOG = on ]]; then
        touch $LOG_FILE
        echo "$(date "+%Y-%m-%d %H:%M") $INFO" >> $LOG_FILE
    fi
}


pisafe_help() {
    echo "$PRODUCTNAME v$SCRIPTVER  - Designed for Raspberry Pi"
    echo " - Backup media (SD card) to an image file"
    echo " - Restore media (SD card) from an image file"
    echo
    echo "Usage: "
    echo "  $SCRIPTNAME [function] [media/file] [file/media] [-y]"
    echo
    echo "CLI Function is:"
    echo "                               - with no arguments it launches the PiSafe menu (recommended)"
    echo "  list                         - list media and image-files "
    echo "  backup [device] [file] [-y]  - backup media to image-file"
    echo "  restore [file] [device] [-y] - restore image-file to media"
    echo "  details [device]             - show media details"
    echo "  erase [device] [format] [-y] - format media as fat32 exfat ntfs or ext4"
    echo "  install [-y]                 - install this script"
    echo "  update [-y]                  - update script from website"
    echo "  uninstall [-y]               - uninstall this script"
    echo "  config                       - edit the config file with nano"
    echo "  log                          - view the log file with nano"
    echo "  -v                           - display version"
    echo "  help | -h  | --h             - help"
    echo
    echo "Notes: "
    echo " - Supports .img .zip .xz .gz and .iso files.  Appends '.img.$DEFAULT_EXTENSION' if no extension is specified "
    echo " - Specifying an '.img' or '.iso' extension is faster but twice the size because it is not compressed."
    echo " -y answers 'y' to prompts."
    echo
    #echo It will run dd, then pishrink, then compress to create a smallimage file of the SD card
    echo
    echo "Examples:"
    echo "$SCRIPTNAME "
    echo "$SCRIPTNAME list"
    echo "$SCRIPTNAME backup sda newimage"
    echo "$SCRIPTNAME backup /dev/sdb newimage.xz -y"
    echo "$SCRIPTNAME restore newimage.img.zip sda"
    echo "$SCRIPTNAME backup /dev/sda /home/pi/Downloads/backup_\$(date +%Y-%d-%m_%I%M%p).img.gz -y"
    echo "$SCRIPTNAME format /dev/sda fat32"
    echo
}


pisafe_about(){
    echo "$PRODUCTNAME was started in 2017 as 'sd' by 'RichardMidnight on github'"\
        "while working on a Raspberry Pi project and needing to make restore-points."\
        "The image writers available at the time did not run on the pi itself"\
        "and were not able to create a new image file." 
    echo
    echo "It was originally called 'sd' and only had a CLI."
    echo
    echo "Then in 2021, the menu front-end was added to make it more usable by others."\
        "It was then renamed it 'PiSafe' which is a reference to the 'ventilated cupboards for storing"\
        "pies while protecting them from insects and vermin'. "
    echo
    echo "It is pretty clean linux so it works on many debian and arch distros."
    echo 
    echo "It's home is $PRODUCTHOME"
    echo
    echo "Use at your own risk."
    echo
    echo "Hopfully $PRODUCTNAME is useful to others."
    echo
    echo "Peace"
}
 

env_root_device() {
    local ROOT_PARTITION
    local ROOT_DRIVE

    ROOT_MAJ=$(findmnt  -n -e  -o MAJ:MIN / | cut -d: -f1)
    ROOT_DEV=$(lsblk -p | grep $ROOT_MAJ:0 | cut -d" " -f1)
    echo $ROOT_DEV
    
    # new simpler way
    # ROOT_PARTITION=$(findmnt -no source /)
}


# ---------- Misc functions

do_beep(){
    FREQ=${1:-600}
    TIME=${2:-.5}
    
    if [[ $SOUND = on ]] ; then
        (speaker-test -t sign -f $FREQ > /dev/null & sleep $TIME && kill -9 $! ) > /dev/null
      #  sleep .5  # to allow the beep to end
    fi
}


do_beep_up(){
    do_beep 500 .3
    do_beep 600 .6
}


do_beep_down(){
   do_beep 600 .3
   do_beep 500 .6
}


get_elapsed_time() {
    # paramaters are in seconds
    local BEG=$1
    local END=$2
    
    echo $(( $(( $END-$BEG ))/60)) min $(( $(( $END-$BEG ))%60 )) sec 
}


do_countdown(){  
    local MAX=${1:-10}
 
    echo "Pausing for $MAX seconds... Press y to continue immediately or any other key to stop"
	echo -n $MAX
    sleep 1
    for number in $(seq 1 $MAX) ; do
		echo -n ".$(($MAX-$number))"
        read -s -t 1 -N 1 INPUT
        if [[ ! -z $INPUT ]]; then
            if [[ $INPUT = y ]]; then
                echo Continuing...
                return
            else
                echo " $INPUT Stopping countdown..."
                return 2
            fi
        fi 
        MSG=$(echo "$MSG.$i")
    done 
    echo ...
}


get_ver_to_int() {
	local IFS=.
	parts=($1)
    
	let val=1000000*parts[0]+1000*parts[1]+parts[2]
	echo $val
    unset IFS
}


get_bytes(){
    # translates from bytes to human readable and vice-verse
    # currently shows 3 significant digits.
    local BYTES=$1
    local OUTPUT=${2:-"-h"};  #human or bytes
    
    local BASE=$(echo $BYTES | tr -cd '[[:digit:]]' )
    local SUFFIX=$(echo $BYTES | tr -cd '[[kmgtbKMGTB]]' )

    if ! [[ $BYTES =~ ^[0-9]+$ ]] ; then   # not a number   
        return 0
    fi
    
    # if no translation needed... then just echo the input and leave
    if [[ $OUTPUT != -h ]] && [[ -z $SUFFIX ]] ; then
        echo $BYTES
        return
    fi
    
    if [[ $OUTPUT = -h ]] && [[ ! -z $SUFFIX ]] ; then
        echo $BYTES
        return
    fi

    if [[ $OUTPUT = -h ]] ; then  # translate to human readable
    
        if [[ -z $SUFFIX ]]; then
            local LEN=${#BYTES}
            local k_ilo=1024;
            local m_ega=$k_ilo*$k_ilo;
            local g_iga=$m_ega*$k_ilo;
            local t_era=$g_iga*$k_ilo;
            local p_eta=$t_era*$k_ilo;
            
            [[ -z $BYTES ]] && return
            
            if ! [[ $BYTES =~ ^[0-9]+$ ]] ; then   # not a number   
                echo 0
                return 1
            fi
            
            case $LEN in
                4) echo $(echo "scale=2; $BYTES/($k_ilo)" | bc)kb ;;
                5) echo $(echo "scale=1; $BYTES/($k_ilo)" | bc)kb ;;
                6) echo $(echo "scale=0; $BYTES/($k_ilo)" | bc)kb ;;
                
                7) echo $(echo "scale=2; $BYTES/($m_ega)" | bc)mb ;;
                8) echo $(echo "scale=1; $BYTES/($m_ega)" | bc)mb ;;
                9) echo $(echo "scale=0; $BYTES/($m_ega)" | bc)mb ;;
                
                10) echo $(echo "scale=2; $BYTES/($g_iga)" | bc)gb ;;
                11) echo $(echo "scale=1; $BYTES/($g_iga)" | bc)gb ;;
                12) echo $(echo "scale=0; $BYTES/($g_iga)" | bc)gb ;;
                
                13) echo $(echo "scale=2; $BYTES/($t_era)" | bc)tb ;;
                14) echo $(echo "scale=1; $BYTES/($t_era)" | bc)tb ;;
                15) echo $(echo "scale=0; $BYTES/($t_era)" | bc)tb ;;
                *)  echo $BYTES ;;
            esac
        else
            echo $BYTES
        fi    
    else  # translate to bytes
        case $SUFFIX in
        b|B|"")     echo $BASE ;;
        k|K|kb|KB)  echo $(($BASE*1024)) ;;
        m|M|mb|MB)  echo $(($BASE*1024*1024)) ;;
        g|G|gb|GB)  echo $(($BASE*1024*1024*1024)) ;;
        t|T|tb|TB)  echo $(($BASE*1024*1024*1024*2014)) ;;
        *)          ui_error $LINENO "bad byte suffix 'SUFFIX'"  ;;
        esac
    fi
}


# ---------- file functions

file_path_base(){
    #echo $(file_path "$*")/$(file_base "$*")
    echo "$*" | cut -d. -f1
}


file_path(){
    dirname "$*"
}


file_base() {
    local fullfilename=$*
    
    filename=$(basename "$fullfilename")
    fname="${filename%.*}"
    echo "$fname"
}


file_ext(){
	base=$(basename "$*")
    
	#look for a period in the basename.  if there is one, there is an extention
	HAS_DOT=$(echo "$base" | grep \\.)
	if [[ ! -z $HAS_DOT ]] ; then
		echo $base | sed 's#.*\.##g'
	else  
		echo ""
		return 1
	fi
}


file_size() {
    local FILE=$1
    local HUMAN=${2:-"no"}
    # $2 can be -h
    
    if [[ -f $FILE ]] ; then
        SIZE_BYTES="$(($(ls -s "$FILE" | cut -d' ' -f1) * 1024))"
        RC=$?
        if (( $RC )); then
            return $RC
        fi
        if [[ $HUMAN = -h ]]; then
            echo $(get_bytes $SIZE_BYTES -h)
        else
            echo $SIZE_BYTES
        fi
    else
        echo 0
    fi
}


file_image_size() {
    local INFILE="$1"
    local HUMAN=${2:-"no"}
    
    file_image_exists "$INFILE" > /dev/null
    if (( $? )) ; then     # image file not found
        echo 0
        return 1
    fi
    
    case $(file_ext "$INFILE") in
        img | iso)      SIZE_BYTES=$(echo $((  $(ls -s "$INFILE" | cut -d' ' -f1 ) * 1024 )) ) ;;
        
        zip)            SIZE_BYTES=$(zipinfo -t "$INFILE" 2> /dev/null | grep "%" | cut -d, -f2 | cut -d" " -f2  )  ;;
        
        xz)             SIZE_BYTES=$(xz -l -v "$INFILE" 2> /dev/null | grep Uncompressed | sed 's/\s\s*/ /g' | cut -d'(' -f 2 | cut -d ' ' -f1 | sed 's/,//g')  ;;  
          
        gz)             SIZE_BYTES=$(pigz -l "$INFILE" 2> /dev/null | grep -v compressed | sed 's/\s\s*/ /g' | sed -e 's/^[ \t]*//' | cut -d' ' -f 2 | sed 's/?/0/g')  ;;
        
        *)              echo 0
                        return 1 ;;
    esac
    
    if [[ -z $SIZE_BYTES ]] ; then
        echo 0 
        return 0
    fi
    
    if [[ $HUMAN = -h ]]; then
        echo $(get_bytes $SIZE_BYTES -h)
    else
        echo $SIZE_BYTES
    fi
}    


file_image_exists(){
    # returns 0 if there is an imagefile, 1 if no imagefile

    local INFILE="$*"
    local IMG
    
    if [[ ! -f $INFILE ]] ; then
        ui_error $LINENO "'$INFILE' not found"
        return 1
    fi
    
    echo -n "Inspecting '$INFILE' for an image file ... "
 
    case $(file_ext "$INFILE") in
        img | iso)      IMG=$INFILE ;;
        
        zip)            IMG=$(zipinfo -1 "$INFILE" 2> /dev/null | grep .img | cut -d " " -f 11)  ;;
        
        xz)             IMG=$(xz -l "$INFILE" 2> /dev/null | grep .img | sed 's/\s\s*/ /g' | cut -d' ' -f10-) ;;   
         
        gz)             IMG=$(pigz -l "$INFILE" 2> /dev/null | grep .img | sed 's/\s\s*/ /g' | cut -d " " -f4-) ;;
         
        *)              IMG= ;;
    esac
    
    if [[ ! -z $IMG ]] ; then
        echo "$IMG" [OK]
        return 0
    else
        ui_error $LINENO "No image found in '$INFILE'"
        return 1
    fi    
}


file_ext_ok(){
    #check_for_supported_file_extention(){
    #returns 0 if good, 1 if bad
    OUTFILE_EXT=$(file_ext "$1")

    case $OUTFILE_EXT in
        img | zip | xz | gz | iso | "" )
            echo true
            return 0
            ;;
        
        *)  
            echo ""
            return 1
            ;;
    esac
}


file_list_image_files(){
    FILES="FILE_NAME FILE_SIZE (IMAGE_SIZE) \n"
    CONFIG=/home/$USER/.config/pisafe/pisafe.conf
    IFS=$'\t\n'
    
    for FILE in $(ls *.img *.zip *.xz *.gz *.iso 2>/dev/null) ; do
        FILE_NS=$(echo "$FILE" | sed 's/ /_/g')
        FILES="$FILES $FILE_NS  $(file_size "$FILE" -h)  ($(file_image_size "$FILE" -h)) \n "
    done

    printf $FILES | column  -t
    unset IFS
}


file_device(){
    MOUNT_POINT=$(df -a "$1" | sed 's/  */ /g' | grep -v Mounted | cut -d ' ' -f 6  )
    BLK_DEV=$(lsblk -n -l -p -o PKNAME,MOUNTPOINT,NAME | sed 's/  */ /g' | grep " $MOUNT_POINT " | cut -d " " -f 1)
    echo $BLK_DEV
}


file_fs_freespace() {
    local FILENAME=${1:-"."}  
    local FORMAT=${2:-"-B1"}   # -B1 for bytes    -h for humanreadable
    local FREESPACE
    
    if [[ -d $FILENAME ]]; then
        FREESPACE=$(df "$FILENAME" -B1 --output=avail | grep -v Avail)
        RC=$?
    else
        FREESPACE=$(df $(dirname "$FILENAME") -B1 --output=avail | grep -v Avail)
        RC=$?
    fi

    if (( $RC )) ; then
        return $RC
    fi
    
    if [[ $FORMAT = -h ]]; then
        FREESPACE=$(get_bytes $FREESPACE -h)
    fi
    
    echo $FREESPACE
}   


file_folder_size() {
    local FOLDER=$*
    # returns human readable
    
    if [[ -d $FOLDER ]] ; then
        sudo du -sh "$FOLDER" | cut -d'/' -f1 | sed 's/\s\s*/ /g'
        RC=$?
        if (( $RC )); then
            return $RC
        fi
    else
        echo 0
    fi
}


file_check_outfile(){
    # uses global variable OUTFILE
    # returns 0 if good
    
    #Quit if outfile is blank
    if [[ -z $OUTFILE ]] ; then
        ui_error $LINENO "File '$OUTFILE' can't be blank" 
        return 1
    fi  
    
    # Quit if path does not exist
    if [[ ! -d  $(file_path $OUTFILE) ]] ; then     
        ui_error $LINENO "Directory does not exist '$(file_path $OUTFILE)'"
        return 2
    fi
    
    # add ext if missing
    if [[ -z $(file_ext "$OUTFILE") ]]; then
        echo "No extension specified.  Adding '.img.$DEFAULT_EXTENSION'"
        OUTFILE=$OUTFILE.img.$DEFAULT_EXTENSION
        #OUTFILE_EXT=$(file_ext $OUTFILE)
        echo "OUT-FILE='$OUTFILE'" 
    fi

    # insert .img if missing
    if [[ $(echo "$OUTFILE" | grep img) = "" ]] && [[ $(echo "$OUTFILE" | grep iso) = "" ]]; then
        echo "inserting .img"
        OUTFILE=$(file_path_base "$OUTFILE").img.$(file_ext "$OUTFILE")
        echo "OUT-FILE='$OUTFILE'" 
    fi

    # quit if unsupported extension
    if [[ -z $(file_ext_ok "$OUTFILE") ]]; then
        ui_error $LINENO "Unsupported file extension '$(file_ext $OUTFILE)'"
        return 3 
    fi

    # Quit if outfile exists
    if [[ -f $OUTFILE ]]  ; then
        ui_error $LINENO "File '$OUTFILE' already exists"
        return 4
    fi 

    # Quit if OUTFILE_BASE.img exists
    if [[ -f $(file_path_base $OUTFILE).img ]]  ; then
        ui_error $LINENO "File '$(file_path_base $OUTFILE).img' already exists"
        return 5
    fi 
    
    # Quit if OUTFILE_BASE.img.ext exists
    if [[ -f $(file_path_base $OUTFILE).img.$(file_ext "$OUTFILE") ]]  ; then
        ui_error $LINENO "File '$(file_path_base $OUTFILE).img.$(file_ext "$OUTFILE")' already exists"
        return 6
    fi 
}


file_check_infile(){
    # quit if infile is blank
    if [[ -z $INFILE ]] ; then
        ui_error $LINENO "File '$INFILE' cannot be blank"
        return 1
    fi 
    
    # quit if infile not found
    if  [[ ! -f $INFILE ]]  ; then
        ui_error $LINENO "File '$INFILE' not found" 
        return 2
    fi 
    
    # quit or warning if no img file found
    file_image_exists "$INFILE"
    if (( $? )); then
        ui_error $LINENO "No image file found in '$INFILE'"
        return 3
    fi 
}


# -----------------------------------------------

do_list_info() {
    DIR=${1:-$PWD}
    
    echo "~~~ CURRENT SYSTEM ~~~"
    echo $PRODUCTNAME ver $SCRIPTVER
    echo $(cat /etc/os-release | grep "PRETTY_NAME=" | cut -d '"' -f2) hw=$(uname -m) kernel=$(uname -r)
    echo "Root device   = $(env_root_device)"
    echo "Root size     = $(media_size $(env_root_device) -h )"
    echo "TrashSize     = $(file_folder_size /home/$USER/.local/share/Trash)"
    echo "RootTrash     = $(file_folder_size /root/.local/share/Trash)"
  #  echo "working dir   = $(pwd) $(file_fs_freespace $(pwd) -h)"
 #   echo "FreeSpace in current dir= $(file_fs_freespace . -h)  $(pwd)"
    echo
    #    echo "Default dir = '$DIR' - $(file_fs_freespace $DIR -h) free"  
    #echo "~~~ PiSafe LOCKED DEVICES ~~~"
    #echo "$(cat $CONFIG | grep "device_lock")"
    #echo
    echo
    echo "~~~ STORAGE MEDIA (hide root device = $HIDE_ROOT_DEVICE) ~~~"
    echo "$(media_list)"
    echo   
    echo
    echo "~~~ IMAGE FILES in '$DIR' ($(file_fs_freespace $DIR -h) free) ~~~"
    SAVED_PWD=$PWD
    cd $DIR  
    file_list_image_files
    cd $SAVED_PWD
}    


# --------------------------------------

pisafe_install_tools() {   
    TOOL_MISSING=false
    INSTALL=$(env_installer)  
    
    for TOOL in $REQUIRED_TOOLS ; do
        if [[ -z $(which $TOOL) ]] ; then
            case $TOOL in
            
            xz)
                ui_echo "Installing xz-utils..." white
                sudo $INSTALL xz-utils
                if [[ ! -f /usr/bin/xz ]]; then
                    ui_error $LINENO "xz not installed."
                fi
                ;;
            
            pishrink.sh)
                ui_echo "Installing pishrink..." white
                wget https://raw.githubusercontent.com/Drewsif/PiShrink/master/pishrink.sh
                sudo chmod +x pishrink.sh
                sudo mv pishrink.sh /usr/local/bin
                
                if [[ ! -f /usr/local/bin/pishrink.sh ]] ; then
                    ui_error $LINENO "pishrink not installed."
                fi
                ;;
            
            *)
                #echo_white Installing $TOOL ...
                ui_echo "Installing $TOOL..." white
                sudo $INSTALL $TOOL
                if (( $? )); then
                    ui_error $LINENO "$TOOL not installed."
                fi
                ;;
            esac    
        fi
    done
}    


pisafe_install(){
    SILENT=${1:-"-n"}
    
    if [[ $SILENT != -y ]]; then
        if [[ $(ui_yesno "INSTALL" "Install $PRODUCTNAME $SCRIPTVER?") != y ]]; then
            ui_msg NOTICE "$PRODUCTNAME not installed"
            return
        fi
    fi
    
    ui_echo "Installing $PRODUCTNAME v $SCRIPTVER..." white
    
    # Install the CLI script
    sudo cp --backup=numbered $SCRIPTNAME /usr/local/bin/$SCRIPTNAME
    sudo chmod +x /usr/local/bin/$SCRIPTNAME
    echo Installed ver=$(/usr/local/bin/$SCRIPTNAME -v)


    # download the icon
    wget https://raw.githubusercontent.com/RichardMidnight/pi-safe/main/pisafe_icon.png -O pisafe_icon.png
    mv pisafe_icon.png /home/$USER/.config/pisafe/pisafe_icon.png

    
    # create the desktop file    
    TERMINAL1=$(env_terminal)
    echo "\
[Desktop Entry]
Type=Application
Terminal=false
Version=1.0
Name=$PRODUCTNAME
Comment=$PRODUCTCOMMENT
#Icon=rpi-imager
#Icon=media-removable
Icon=/home/$USER/.config/pisafe/pisafe_icon.png
#Exec=lxterminal --geometry=110x40 -e $SCRIPTNAME
Exec=$TERMINAL1 $SCRIPTNAME
Categories=Utility
StartupNotify=false" > "$PRODUCTNAME.desktop"   

    # for lxde, MATE and xfce put it in /usr/share/applications
    sudo mv "$PRODUCTNAME.desktop" "/usr/share/applications"
    # for just this user, put it in $HOME/.local/share/applications/
    #mv "$PRODUCTNAME.desktop" "$HOME/.local/share/applications/"

    if [[ -f /usr/local/bin/$SCRIPTNAME ]]; then 
        MSG="$PRODUCTNAME $SCRIPTVER installed.            
        \nSelect it from the 'Accessories' menu.
        \n\nOr you can execute it from any directory by typing '$SCRIPTNAME'."
    
        if [[ $INTERFACE = cli ]]; then
            MSG="$PRODUCTNAME $SCRIPTVER installed.  Select it from the 'Accessories' menu or you can execute it in a terminal window by typing '$SCRIPTNAME'."
        fi
        
    else
        MSG="$PRODUCTNAME $SCRIPTVER not installed.  '/usr/local/bin/$SCRIPTNAME' not found. "
       
    fi
    
    ui_msg INSTALL "~ $MSG" white OK log
}


pisafe_update() {
    INTERFACE=${1:-"cli"}
    SUMMARY=${2:-"yes"}
    local YES=${3:-"-n"}
      
    if [[ $SUMMARY = yes ]]; then
        ui_echo "Checking for $PRODUCTNAME $SCRIPTVER updates..." white
    fi
      
    local SERVER_VER=
    wget https://raw.githubusercontent.com/RichardMidnight/pi-safe/main/$SCRIPTNAME -O $SCRIPTNAME.tmp 2> /dev/null 
    RC=$?
    if (( $RC ));  then
        echo_if_cli "ERROR: Can't connect to server..."
        return $RC
    fi    

    # did we get the new version from the server?
    if [[ -f $SCRIPTNAME.tmp ]]; then
        SERVER_VER=$(bash $SCRIPTNAME.tmp -v)
    else
        return 1
    fi

    if [[ $(get_ver_to_int $SERVER_VER) -gt $(get_ver_to_int $SCRIPTVER) ]]; then
        if [[ $YES = -y ]]; then
            RESULT="y"
        else
            RESULT=$(ui_yesno "UPDATE AVAILABLE" "Update $PRODUCTNAME from '$SCRIPTVER'  to '$SERVER_VER' ")
        fi
        
        if [[ $RESULT = y ]]; then 
            ui_echo "Updating $PRODUCTNAME to v $SERVER_VER..." white
            sudo mv $SCRIPTNAME.tmp /usr/local/bin/$SCRIPTNAME
            sudo chmod +x /usr/local/bin/$SCRIPTNAME
            echo "$($SCRIPTNAME -v) installed. Press any key to exit... "
            read -s -n 1
            exit 0
        fi
    else  
        rm $SCRIPTNAME.tmp
        if [[ $SUMMARY = yes ]]; then
            ui_msg UPDATE "~ $PRODUCTNAME $SCRIPTVER is up to date.  Server ver is '$SERVER_VER' " white OK log
        fi
    fi
}


pisafe_uninstall(){
    SILENT=${1:-"-n"}
    
    if [[ -f /usr/local/bin/$SCRIPTNAME ]]; then
        INSTALLED_VER=$(/usr/local/bin/$SCRIPTNAME -v)
    fi
    
    if [[ $SILENT != -y ]]; then
        if [[ $(ui_yesno "UNINSTALL" "Uninstall $PRODUCTNAME $INSTALLED_VER" "--defaultno") != y ]] ; then
            ui_msg UNINSTALL "$PRODUCTNAME not uninstalled"
            return
        fi
    fi
   
    ui_echo "Uninstalling $PRODUCTNAME v $INSTALLED_VER..." white
    
    # remove from the menu
    sudo rm -f "/usr/share/applications/$PRODUCTNAME.desktop"
    # next line cleans up an old configuration
    rm -f "$HOME/.local/share/applications/$PRODUCTNAME.desktop"
    
    # remove the script and config
    sudo rm -f "/usr/local/bin/$SCRIPTNAME"
    rm -f $CONFIG
    
    ui_msg  UNINSTALL "~ $PRODUCTNAME $INSTALLED_VER uninstalled.  $LOG_FILE not removed." white OK log
}


# ---------- Media functions

media_name(){
    local VEN_MOD=$(lsblk -dpnlo VENDOR,MODEL $1  2> /dev/null | sed 's/  */ /g')
    RC=$?
    if (( $RC )); then
        return $RC
    fi
    local SIZE=$(lsblk -dpnlo SIZE $1  2> /dev/null | sed 's/[ ]\+//g')
    local DEVICE=$(lsblk -dpnlo NAME $1  2> /dev/null)
    
    echo "$VEN_MOD - $SIZE ($DEVICE)"
}


media_size() {
    local DEV=$1
    local HUMAN=${2:-"no"}
   
     # add '/dev/' if missing
    if [[ ${DEV:0:5} != "/dev/" ]]; then
        #echo "Device prefix not specified.  Adding '/dev/'"
        DEV="/dev/"$DEV
    fi
   
    SIZE_BYTES=$(lsblk $DEV -dnbo size  2> /dev/null)
    RC=$?
    if (( $RC )); then
        echo 0
        return $RC       
    fi
    
    if [[ $HUMAN = -h ]]; then
        echo $(get_bytes $SIZE_BYTES -h)
    else
        echo $SIZE_BYTES
    fi
    
    # an alternative way:
    # echo $(( $(sudo blockdev --getsize64 /dev/sda) ))
    # echo $(( $(sudo blockdev --getsize64 /dev/sda)/1024/1024 ))mb    
}


media_serialno(){
    local DEVICE=$1
    
    # currently vendor + SN
    SN=$(lsblk -n -d --output vendor,model,serial "$DEVICE" | sed 's/ /_/g' )
    echo $SN
}


media_check_indev(){
    #returns 0 if good
    # check INDEV
    
    # stop if indev is blank
    if [[ -z $INDEV ]] ; then
        ui_error $LINENO "IN-DEV '$INDEV' can't be blank" 
        return 1
    fi 
    
    # add '/dev/' if missing
    if [[ ${INDEV:0:5} != "/dev/" ]]; then
        echo "Device prefix not specified.  Adding '/dev/'"
        INDEV="/dev/"$INDEV
        echo "IN-DEV='$INDEV'"
    fi
    
    # Stop if INDEV does not exists
    if  [[ ! -e $INDEV ]]  ; then
        ui_error $LINENO "IN-DEV '$INDEV' not found"
        return 2
    fi 
    
    # Warning if INDEV is root device
    if [[ $INDEV = $(env_root_device) ]]; then
        ui_msg WARNING "~ SD-card '$(media_name $INDEV)' is root device '$(env_root_device)'." red OK log
    fi  
    
    # Warning if device filesystem has an overlay
    OVERLAY=$(media_os $INDEV | grep OVERLAY)
    if [[ ! -z $OVERLAY ]] && [[ $AUTO_EXPAND_FS = on ]]; then
        if [[ $(ui_yesno "WARNING 4" "'$(media_name $INDEV)' filesystem has an overlay and cannot auto-expand. Turn off auto-expand?" ) = y ]]; then
			AUTO_EXPAND_FS=off
			ui_msg WARNING "~ Overlay found.  Auto-expand turned off" red OK log
		fi
    fi
    
    # Warning if SD-card is bigger than 16GB
    if [[ $(media_size $INDEV) -gt 16000000000 ]]; then
        MESG=" '$(media_name $INDEV)' is larger than 16GB.  \
         \n\nUse a smaller SD card if you can.  \
         \nIt will be faster because the entire SD card must be read before it can be compressed.\
         \n\nA good 8gb card with RaspiOS in a Raspberry Pi 4 takes about 10 minutes"
         ui_msg WARNING "$MESG" red OK
    fi
    
    # Stop if SD-card is bigger than freespace  
    PARTED_OUTPUT=$(sudo parted $INDEV unit B print free )
    MEDIA_FREESPACE_AT_END=$(echo "$PARTED_OUTPUT" | tail -1 | grep Free | sed 's/[ ]\+/ /g' | cut -d " " -f 4 | tr -d 'B' )
    if [[ -z $MEDIA_FREESPACE_AT_END ]]; then
        MEDIA_FREESPACE_AT_END=0
    fi
    MEDIA_SIZE=$(( $(media_size $INDEV) - $MEDIA_FREESPACE_AT_END ))
    if [[ $MEDIA_SIZE -gt $(file_fs_freespace "$DEFAULT_PATH") ]]; then
        MSG="Not enough free space on '$DEFAULT_PATH' 
         \n'$(media_name  $INDEV)' is $(get_bytes $MEDIA_SIZE -h)
         \nfreespace on '$DEFAULT_PATH' is $(file_fs_freespace "$DEFAULT_PATH" -h) "
         ui_msg ERROR "~ $MSG" red OK log
         return 2
    fi
    
    # Warning if one and a half times the SD-card is bigger than freespace
    SPACENEEDED=$(( $MEDIA_SIZE + $(( $MEDIA_SIZE / 2 )) ))
    if [[ $SPACENEEDED -gt $(file_fs_freespace "$DEFAULT_PATH") ]]; then
        MSG="Might not be enough free space on '$DEFAULT_PATH'
            \n'$(media_name $INDEV)' is $(get_bytes $MEDIA_SIZE -h)
            \nfreespace on '$DEFAULT_PATH' is $(file_fs_freespace "$DEFAULT_PATH" -h)
            \nThere is $(file_folder_size /home/$USER/.local/share/Trash) in the Trash" 
        ui_msg WARNING "$MSG" red OK
    fi
}


media_check_outdev(){
    # quit if outdev is blank
    if [[ -z $OUTDEV ]]; then
        ui_error $LINENO "Device '$OUTDEV' cannot be blank"
        return 1
    fi
    
    # Add '/dev/' if missing
    if [[ ${OUTDEV:0:5} != "/dev/" ]]; then
        echo_if_cli "Device prefix not specified.  Adding '/dev/'"
        OUTDEV="/dev/"$OUTDEV
        echo_if_cli "OUT-DEV='$OUTDEV'"
    fi
    
    # Quit if OUTDEV is not found
    if  [[ ! -e $OUTDEV ]]  ; then
        ui_error $LINENO "Device '$OUTDEV' not found"
        return 2
    fi 
           
    VENDOR=$(lsblk -n -d --output vendor /dev/sda)
    SERIAL=$(lsblk -n -d --output serial /dev/sda)
    
    #stop if outdev is piSave-locked
  #  if [[ $(config_var_get device_lock_$(media_serialno $OUTDEV)) = on ]]; then
  #      ui_error $LINENO "Device '$(media_serialno $OUTDEV)' is locked by PiSafe in the config file"
  #      return 1
  #  fi
    
    # Stop if outdev is the root device
    if [[ $OUTDEV = $(env_root_device) ]]; then
        ui_error $LINENO "Restore to root device not allowed"
        return 1
    fi
    
    #stop if INFILE is on OUTDEV
    if [[ $(file_device "$INFILE") = $OUTDEV ]]; then
        ui_error $LINENO "Restore to same device as '$INFILE' not allowed"
        return 1
    fi
    
    # Warning if device is large
    if [[ $(media_size $OUTDEV) -gt $LARGE_DEVICE_WRITE_WARNING ]]; then
        ui_msg "RESTORE WARNING" "'$(media_name $OUTDEV)'
        \nis larger than $(get_bytes $LARGE_DEVICE_WRITE_WARNING -h)... 
        \n\nBe sure this is the right device" red OK
    fi
     
    # Stop if imagefile is larger than device
    if [[ $(file_image_size "$INFILE") -gt $(media_size $OUTDEV) ]]; then
        ui_msg "RESTORE ERROR" "~ Not enough room
        \nThe image in '$INFILE' is ' $(file_image_size "$INFILE" -h)' 
        \nand '$OUTDEV' is only '$(media_size $OUTDEV -h)'" red log
        return 1
    fi
}


media_backup(){
    #echo 1 - sudo dd bs=4M if=/dev/$INDEV of=$OUTFILE.img status=progress conv=fsync 
    #echo 2 - sudo pishrink.sh $OUTFILE.img
    #echo 3 - zip -db -dd -m $OUTFILE.zip $OUTFILE.img
    
    #local INDEV=$1
    INDEV=$1
    OUTFILE=$2
    local SILENT=${3:-"-n"}   # this lets us bypass some of the safety prompts
    INTERFACE=${4:-cli}  #CLI or gui
   
    ui_echo "$PRODUCTNAME $SCRIPTVER Backup '$INDEV' to '$OUTFILE'" white
      
    if [[ $INTERFACE = cli ]]; then
        media_check_indev
        RC=$?
        if (( $RC )); then
            do_beep_down
            return $RC
        fi     
        
        file_check_outfile   
        RC=$?
        if (( $RC )); then
            do_beep_down
            return $RC
        fi  
    fi    
    
    # Final check before reading data
    if [[ ! -e $INDEV ]] ; then
        echo
        ui_error $LINENO "IN-DEV '$INDEV' must exist. "
        do_beep_down
        return 1
    fi 
    
    if  [[ -e $OUTFILE ]] ; then
        echo
        ui_error $LINENO "OUT-FILE '$OUTFILE' can't exist. "
        do_beep_down
        return 2
    fi  
    
    if [[ $SILENT != -y ]]; then
        do_beep
        do_countdown 10
        if (( $? )); then
            return 1
        fi
    fi
   

    #################################################
    # this section reads the data to a file
    #################################################
    OUTFILE_BASE=$(file_path_base "$OUTFILE" )

    TIME1=$(date +%s)
    echo_white "Step 1 of 3 - Reading  '$INDEV' to '$OUTFILE_BASE.img' ... "
    date
    
    BS=$(( 4 * 1024 * 1024 ))
    BLOCKS_TO_READ=$(( $(media_size $INDEV) / $BS ))
    
    
	# new section to skip freespace 
	if [[ $SKIP_FREESPACE = on ]]; then

		START_OF_FREESPACE=$(sudo parted -ms "$INDEV" unit B print free)
		RC=$?
		if (( $RC )); then
			error $LINENO "parted failed with rc $RC"
            do_beep_down
			exit 15
		fi
		START_OF_FREESPACE=$(tail -1 <<< "$START_OF_FREESPACE" | grep free | cut -d ':' -f 2 | tr -d 'B')
		if ! (( $START_OF_FREESPACE )); then 
			START_OF_FREESPACE=$(media_size $INDEV)
		fi

		BYTES_TO_READ=$START_OF_FREESPACE
		BLOCKS_TO_READ=$(( $BYTES_TO_READ / $BS + 1))

		echo Media size=$(media_size $INDEV -h)
		echo Skipping $(get_bytes $(( $(media_size $INDEV) - $START_OF_FREESPACE )) -h ) of freespace at end of media.
		#echo Reading $(get_bytes $START_OF_FREESPACE -h)
	else
        BYTES_TO_READ=$(media_size $INDEV)
        BLOCKS_TO_READ=$(( $BYTES_TO_READ / $BS + 1))
      #  echo Reading $(get_bytes $START_OF_FREESPACE -h)
	fi    
	#end of freespace  
    
    echo Reading $(get_bytes $BYTES_TO_READ -h)
    
    
 #   MEDIA_SIZE=$(sudo lsblk -ndb $MEDIA -o size)
    if [[ ! -z $(which pv) ]]; then
		run_command "sudo pv $INDEV -s $BYTES_TO_READ $DEVICE | dd bs=$BS of='$OUTFILE_BASE.img' count=$BLOCKS_TO_READ iflag=fullblock conv=fsync " $LINENO
       	RC=$?
    else
      echo "Note: 'pv' is not installed so there is no progress indicator for this step. Please wait..."
      run_command "dd bs=$BS of='$OUTFILE_BASE.img' count=$BLOCKS_TO_READ iflag=fullblock conv=fsync  " $LINENO
      RC=$?
    fi
    if (( $RC )); then
        do_beep_down
        return $RC
    fi
    
    sleep 5s
    echo "Done reading device '$INDEV'"
    echo_white "'$(ls -s -h "$OUTFILE_BASE".img)'"
    TIME2=$(date +%s)  
    echo_white Step 1 took $(get_elapsed_time $TIME1 $TIME2)
    echo
   
   
    if [[ ! $(file_ext "$OUTFILE") = iso ]]; then 
        echo_white "Step 2 of 3 - Shrinking filesystem ..."
        PI_SHRINK_OPTS=

        if [[ $AUTO_EXPAND_FS = off ]] ; then 
            PI_SHRINK_OPTS="-s"
        fi
        if [[ $SHRINK_FS != off ]]; then
            run_command "sudo pishrink.sh $PI_SHRINK_OPTS '$OUTFILE_BASE'.img " $LINENO
            RC=$?
            if (( $RC )); then
                echo Continuing without shrinking file system...
            fi
        else
            echo "Filesystem not shrunk.  Setting is 'off'."
        fi
        sleep 5    # to allow file size to register with the OS
        echo Done shrinking filesystem.
        echo_white "'$(ls -s -h "$OUTFILE_BASE".img)'"
        TIME3=$(date +%s)
        echo_white Step 2 took $(get_elapsed_time $TIME2 $TIME3)
    fi
    
    echo
    echo_white "Step 3 of 3 - Compressing '$OUTFILE_BASE.img' to '$OUTFILE' ... "
    date
    echo Compression set to level $COMPRESSION_LEVEL of 9
    echo "$(file_size "$OUTFILE_BASE".img -h) to compress."
    
    case $(file_ext "$OUTFILE") in
        img)
            echo Not compressing .img file ...
            ;;
        
        iso)
            echo Not compressing .iso file ...
            mv "$OUTFILE_BASE".img "$OUTFILE_BASE".iso
            RC=$?
            OUTFILE="$OUTFILE_BASE".iso
            ;;
        
        zip)
            local FILESIZE_M=$(( $(file_size "$OUTFILE_BASE".img)/1024/1024 ))
            local DOTSIZE=$(( $FILESIZE_M / 50 ))m
            echo Each dot=$DOTSIZE 
            echo -n "                     $OUTFILE_BASE.img"
            echo " [........................|.........................] 100%"
            run_command "zip -dbds $DOTSIZE -m -$COMPRESSION_LEVEL '$OUTFILE' '$OUTFILE_BASE.img'" $LINENO
            #zip -dbds $DOTSIZE -m -$COMPRESSION_LEVEL "$OUTFILE" "$OUTFILE_BASE".img
            RC=$?
            
            #warning, with progress bar ZIP loses .img in the image name
            #sudo pv "$OUTFILE_BASE".img | sudo zip -$COMPRESSION_LEVEL  > "$OUTFILE"
            #EXIT_CODE=$? 
            #sudo rm -f "$OUTFILE_BASE".img 
            ;;
        
        xz)
            run_command "pv '$OUTFILE_BASE.img' | xz -z -c -T0 -$COMPRESSION_LEVEL > '$OUTFILE'" $LINENO
            RC=$? 
            rm -f "$OUTFILE_BASE".img
            ;;
        
        gz)
            run_command "pv '$OUTFILE_BASE.img' | pigz -$COMPRESSION_LEVEL > '$OUTFILE'" $LINENO
            RC=$? 
            rm -f "$OUTFILE_BASE".img
            ;;
        
        *)
            echo
            ui_error $LINENO "Unsupported file extension '$(file_ext "$OUTFILE")'"
            do_beep_down
            return 1
            ;;
    esac
    
    if (( $RC )); then
        do_beep_down
        return $RC
    fi
    
    echo "Done compressing '$OUTFILE_BASE.img' to '$OUTFILE' "
    echo_white $(ls -s -h "$OUTFILE")
    TIME4=$(date +%s)
    echo_white  Step 3 took $(get_elapsed_time $TIME3 $TIME4)
    
    # check if "$OUTFILE" was created
    if [[ ! -f $OUTFILE ]]; then
        do_beep_down
        echo
        echo_red "ERROR: creating '$OUTFILE'"
        return 1
    fi    
    
    do_beep_up
    ui_echo "~ Backup complete. $(media_size $INDEV -h) reduced to $(file_size "$OUTFILE" -h) in $(get_elapsed_time $TIME1 $TIME4)." white
}


media_restore(){
    local INFILE=$1
    local OUTDEV=$2
    local SILENT=${3:-"-n"}   # this lets us bypass some of the safety prompts
    INTERFACE=${4:-cli}  #CLI or gui

    ui_echo "$PRODUCTNAME $SCRIPTVER Restore '$INFILE' to '$OUTDEV'" white
    echo "IN-FILE='$INFILE'"
    echo "OUT-DEV='$OUTDEV'"

 
    file_check_infile
    RC=$?
    if (( $RC )); then
        do_beep_down
        return $RC
    fi

    media_check_outdev
    RC=$?
    if (( $RC )); then
        do_beep_down
        return $RC
    fi


    # Final check before writing data
    # quit if INFILE is not a file
    if ! [[ -e $INFILE ]]; then
        echo
        #echo_red "ERROR r1: IN-FILE '$INFILE' must exist."
        ui_error $LINENO "FILE '$INFILE' does not exist."
        do_beep_down
        return 1
    fi 
    
    #quit if OUTDEV is not a device
    if ! [[ -e $OUTDEV ]]; then
        echo
        #echo_red "ERROR r2: OUT-DEV '$OUTDEV' must exist."
        ui_error $LINENO "DEVICE '$OUTDEV' does not exist."
        do_beep_down
        return 1
    fi
    
    if [[ $SILENT != -y ]]; then
       # echo
       # echo "Write '$INFILE' to '$OUTDEV' '$(media_name $OUTDEV)' ?"
        echo_red "WARNING... All existing data on '$(media_name $OUTDEV)' - will be erased!"
        do_beep
        RESULT=$(ui_yesno "RESTORE" "WARNING... All existing data on '$(media_name $OUTDEV)' - will be erased!  Continue y/n?" "--defaultno")
        if [[ $RESULT != y ]]; then
            ui_msg RESTORE "~ You did not answer 'y'" white OK log
            return 1
        fi
    fi
    
    ui_countdown 10 "Restore" "Overwriting '$(media_name $OUTDEV)' in 10 seconds...\n\n"
    if (( $? )); then
        ui_msg  RESTORE "~ Restore stopped." white "" log
        return 2
    fi
    
    #################################################
    # this section writes the data
    #################################################

    echo_if_cli "Unmounting device $OUTDEV ..." "white"
    umount $OUTDEV?  2> /dev/null
   # if (( $? )); then
   #     ui_error $LINENO "Cannot unmount $OUTDEV"
   #     return
   # fi
    
    local INFILEEXT=$(file_ext "$INFILE")
  
    echo        
    echo_white "Writing '$INFILE' to '$OUTDEV' ... "    
    date
    TIME1=$(date +%s)
    echo_if_cli "$(file_image_size "$INFILE" -h) to write"
    
    echo "Erasing MBR, signature, and partition table from '$OUTDEV'..." "white"
	run_command "sudo dd if=/dev/zero of=$OUTDEV bs=512 count=2 > /dev/null"  $LINENO
    
    case $INFILEEXT in
        img | iso)
            if [[ $INTERFACE = cli ]]; then
                run_command "pv '$INFILE' | sudo dd of=$OUTDEV bs=4M conv=fsync"
                RC=$?
            else
                ui_echo "~ Running: pv '$INFILE' | sudo dd of=$OUTDEV bs=4M conv=fsync" blue
                (sudo pv -n "$INFILE" | sudo dd of=$OUTDEV bs=4M) 2>&1 | \
                whiptail --backtitle "$BACKTITLE" --title "RESTORE" --gauge "\nWriting '$INFILE' \n\nto '$(media_name $OUTDEV)' ..." $WT_HEIGHT $WT_WIDTH 0
                RC=$?
            fi
            ;;
        
        zip)
            RESTORE_BYTES=$(file_image_size "$INFILE")
            if [[ $INTERFACE = cli ]]; then
                run_command "unzip -p '$INFILE' | pv -s $RESTORE_BYTES | sudo dd of=$OUTDEV bs=4M conv=fsync" $LINENO
                RC=$?
            else
                ui_echo "~ Running: unzip -p '$INFILE' | pv -s $RESTORE_BYTES | sudo dd of=$OUTDEV bs=4M conv=fsync" blue
                (unzip -p "$INFILE" | pv -n -s $RESTORE_BYTES | sudo dd of=$OUTDEV bs=4M) 2>&1 | \
                whiptail --backtitle "$BACKTITLE" --title "RESTORE" --gauge "\nWriting '$INFILE' \n\nto '$(media_name $OUTDEV)' ..." $WT_HEIGHT $WT_WIDTH 0
                RC=$?
            fi
            ;;
        
        xz)
            if [[ $INTERFACE = cli ]]; then
                run_command "pv '$INFILE' | xz -d -c | sudo dd of=$OUTDEV bs=4M conv=fsync" $LINENO
                RC=$?
            else
                ui_echo "~ Running: pv '$INFILE' | xz -d -c | sudo dd of=$OUTDEV bs=4M conv=fsync" blue
                (pv -n "$INFILE" | xz -d -c | sudo dd of=$OUTDEV bs=4M) 2>&1 | \
                whiptail --backtitle "$BACKTITLE" --title "RESTORE" --gauge "\nWriting '$INFILE' \n\nto '$(media_name $OUTDEV)' ..." $WT_HEIGHT $WT_WIDTH 0
                RC=$?
            fi
            ;;

        gz)
            if [[ $INTERFACE = cli ]]; then
                run_command "pv '$INFILE' | pigz -d -k -c | sudo dd of=$OUTDEV bs=4M conv=fsync" $LINENO
                RC=$?
            else
                ui_echo "~ Running: pv '$INFILE' | pigz -d -k -c | sudo dd of=$OUTDEV bs=4M conv=fsync" blue
                (pv -n "$INFILE" | pigz -d -k -c | sudo dd of=$OUTDEV bs=4M conv=fsync) 2>&1 | \
                whiptail --backtitle "$BACKTITLE" --title "RESTORE" --gauge "\nWriting '$INFILE' \n\nto '$(media_name $OUTDEV)' ..." $WT_HEIGHT $WT_WIDTH 0
                RC=$?
            fi    
            ;;

        *)
            echo
            echo_red ERROR.  Unsupported file extension. 
            return  1 
            ;;
    esac        
    TIME2=$(date +%s)
    echo
    
    if (( $RC )); then
        echo
        do_beep_down  
        ui_error $LINENO "Restore failed. RC=$RC"
        #ui_log "Restore failed $RC"
        return $RC
    else
        do_beep_up
        ui_echo "~ Restore complete. '$INFILE' written to '$OUTDEV' in $(get_elapsed_time $TIME1 $TIME2)." white
    fi
}


media_list() {
    HIDE_ROOT_DEVICE_OVERRIDE=$1    # y n or blank
    local DEVICES= 
   
    case $HIDE_ROOT_DEVICE_OVERRIDE in
        y)      ROOT_FILTER=$(env_root_device) ;;
        
        n)      ROOT_FILTER="aspodiausdfpoiasdf" ;;
        
        *)      if [[ $HIDE_ROOT_DEVICE = on ]]; then
                    ROOT_FILTER=$(env_root_device)
                else    
                    ROOT_FILTER="aspodiausdfpoiasdf"
                fi   
                ;;
    esac
    
    DEVICES=$(lsblk -I 8,179 -dnpo NAME,VENDOR,MODEL,SIZE | grep -v $ROOT_FILTER)
    RC=$?
    if (( $RC )); then
        return $RC
    fi 
    
    echo "${DEVICES[@]}"
}


media_mount(){
    MEDIA=$1
    PARTED_OUTPUT=$(sudo parted -ms $MEDIA print)  # no freespace
    MEDIA_PARTITIONS=$(echo "$PARTED_OUTPUT" | grep ^[1-9]: | grep -v ":::;" | cut -d: -f1)
    
    for PARTITION in $MEDIA_PARTITIONS; do
        udisksctl mount -b $MEDIA$PARTITION
        if (( $? )); then
            echo error mounting $MEDIA$PARTITION
        fi
    done
}


media_power_off(){
    MEDIA=$1
    umount $MEDIA?
    udisksctl power-off $MEDIA
}


# ---------- UI functions


ui_msg() {
    # usage ui_msg INSTALL "$MSG" white OK log
    TITLE="$1"
    MSG="${2:-no message}"
    COLOR="${3:-grey}"
    OK_BUTTON="${4:-Back}"
    local LOGIT="${5:-no}"   # or log
    
    if [[ $INTERFACE = cli ]]; then
        ui_echo "$MSG" $COLOR $LOGIT 
    else
        if [[ $LOGIT = log ]]; then
            ui_log "$MSG"
        fi    
        whiptail --backtitle "$BACKTITLE" --title "$TITLE" --scrolltext --ok-button "$OK_BUTTON" --msgbox "$MSG" $WT_HEIGHT_TALL  $WT_WIDTH_WIDE
    fi
}


ui_echo(){
    # ui_echo "msg" red log
    MSG="$1"
    COLOR="${2:-grey}"
    local LOGIT="${3:-log}"   # or nolog
    
    case $COLOR in
        red)        echo_red "$MSG" ;;
        white)      echo_white "$MSG" ;;
        blue)       echo_blue "$MSG" ;;
        *)          echo -e "$MSG" ;;
    esac
    
    if [[ $LOGIT = log ]]; then    
        ui_log "$MSG"  
    fi
}


ui_yesno(){
    # note, this output is often assigned to a variable, so don't add any additional echo statements.
    TITLE="$1"
    MSG="$2"
    DEFAULT="${3:-""}"   # defaults to Yes.  can specify --defaultno
   # COLOR="${4:-white}"  color does not work with the 'read' command
    
    if [[ $INTERFACE = cli ]]; then
        MSG="$PRODUCTNAME: $TITLE: $MSG  [y/n]?"
        # change 'newline' chars to ' -'
        MSG=$(echo $MSG | sed 's/\\n/ -/g')
        while true; do        
            read -s -n1 -p "$MSG" yn
            case $yn in
                [Yy]* ) echo y; return 0;;
                [Nn]* ) echo n; return 0;;
                * )     ;;
            esac
        done
    else    
        whiptail --backtitle "$BACKTITLE"  --title "$TITLE" $DEFAULT --yesno "$MSG" $WT_MB_HEIGHT $WT_MB_WIDTH 3>&1 1>&2 2>&3
        RC=$?
        if (( $RC )); then
            echo n
        else
            echo y
        fi
        return $RC
    fi
}


ui_countdown(){
    local SECONDS=${1:-10}
    local TITLE=$2
    local MESSAGE="${3:-Counting down...}"
    
    if [[ $INTERFACE = cli ]]; then
        do_countdown $1
    else
        whiptail_countdown "$SECONDS" "$TITLE" "$MESSAGE"
    fi
}


ui_error() {
    # usage:  ui_error $LINENO "message"
    LINE=$1
    shift
    MSG="$@"
    ui_echo "~ Error in line $LINE. $MSG" red log
}



menu_1start_of_menu_functions(){
    x=1
    ##################################################################################
    ##################################################################################
    # all functions needed for the menu go below here
    # all functions below here can be deleted if only using the CLI
    ##################################################################################
    ##################################################################################
}

######## functions for advanced features

media_format(){
    local DEVICE=$1
    local FORMAT=${2:-"fat32"}    # fat32, ntfs, ext4, exfat
    local SILENT=${3:-"-n"}
    
    local ROOT="$(env_root_device)"
    local TYPE="$(lsblk $DEVICE -dnpo TYPE)"
    local NAME="$(lsblk $DEVICE -dnpo VENDOR,MODEL,SIZE,TYPE) ($DEVICE)"
    local PARTITION=$DEVICE

	if [[ $FORMAT = fat32 ]] ; then 
		PART_TABLE=msdos
		PART_TYPE=primary
		PART_NAME=
	else
		PART_TABLE=gpt
		PART_TYPE=
		PART_NAME=$FORMAT
	fi

	if [[ $FORMAT = exfat ]]; then
		FS_TYPE=ntfs
	else
		FS_TYPE=$FORMAT
	fi
	

    if [[ -z $1 ]] ; then
        ui_error $LINENO "Device not specified."
        lsblk -dp
        return 1
    fi

    if [[ ! -e $DEVICE ]]; then
      ui_error $LINENO "'$DEVICE' does not exist"
      return 2
    fi

    if [[ $1 = $ROOT ]] ; then
        ui_error $LINENO "Can not format root device"
        return 3
    fi
    
    # Stop if dev is the root device
    if [[ $1 = $(env_root_device) ]]; then
        ui_error $LINENO "Format root device not allowed"
        return 3
    fi

    ui_echo "$PRODUCTNAME $SCRIPTVER Format '$(media_name $DEVICE)' to '$FORMAT'..." white
    
   # echo $SILENT
    
    if [[ $SILENT != -y ]]; then
        RESULT=$(ui_yesno "ERASE" "WARNING!!  \n\nFormat '$DEVICE' to '$FORMAT' \n\nAll existing data on '$NAME' will be erased.  \n\nAre you sure you want to continue? y/n?" "--defaultno")
        echo
        if [[ $RESULT != y ]]; then
            ui_msg ERASE "~ $DEVICE not erased. you answered '$RESULT'" white OK log
            return 1
        fi
    fi

    ui_countdown 10 "" "Erasing Media '$(media_name $DEVICE)' in 10 seconds...\n\n"
    if (( $? )); then
    # ui_msg  "INSTALL:" "$MSG" "white" "OK" "log"
        ui_msg  ERASE "~ Erase Media stopped." white OK log
        return 2
    fi

    echo "Unmounting '$DEVICE'..."
    sudo umount $DEVICE 2> /dev/null
    sudo umount $DEVICE? 2> /dev/null


    # if selected whole disk... wipe the partition table and make a new partition table.
    if  [[ $TYPE = disk ]]; then
       
        echo "Writing zeros to '$DEVICE'..."
        run_command "sudo dd if=/dev/zero of=$DEVICE bs=512 count=4" $LINENO
        if (( $? )); then
            ui_error $LINENO "Writing zeros failed"
            return 9
        fi

        echo "Writing new '$PART_TABLE' partition table to '$DEVICE'..."
        run_command "sudo parted -s $DEVICE mklabel $PART_TABLE" $LINENO
        if (( $? )); then
            ui_error $LINENO "mklabel failed"
            return 10
        fi

        echo "Creating empty partition on '$DEVICE'..."
        # run_command "sudo parted -s -a opt $DEVICE mkpart primary $FS_TYPE 2M 100%" $LINENO
        run_command "sudo parted -s -a opt $DEVICE mkpart $PART_TYPE $PART_NAME $FS_TYPE 2M 100%" $LINENO
        if (( $? )); then
            ui_error $LINENO "mkpart failed"
            return 11
        fi
        
        PARTITION=$DEVICE\1    
    fi    

    sleep 2
    echo "Formatting the partition to '$FORMAT'..."

    case $FORMAT in
        fat16)  
            run_command "sudo mkfs.vfat -F16 -v -I -n FAT16 $PARTITION" $LINENO
            rc=$?
            ;;

        fat32)
            run_command "sudo mkfs.vfat -v -I -n FAT32 $PARTITION" $LINENO
            rc=$?
            ;;
            
        exfat)
            #https://unix.stackexchange.com/questions/61209/create-and-format-exfat-partition-from-linux
            if [[ -z $(which mkfs.exfat) ]] ; then
                echo Installing exfat support ...
                sudo $INSTALL exfat-utils exfat-fuse
                sudo modprobe fuse 
                echo "fuse" | sudo tee -a /etc/modules
            fi    
            run_command "sudo mkfs.exfat -n EXFAT $PARTITION" $LINENO
            rc=$?
            ;;      
        
        ntfs)
            if [[ -z $(which mkfs.ntfs) ]] ; then
                #sudo apt-get install fuse ntfs-3g
                echo Installing ntfs support...
                sudo $INSTALL fuse ntfs-3g
                sudo modprobe fuse 
                echo "fuse" | sudo tee -a /etc/modules
            fi  
            run_command "sudo mkfs.ntfs -f -L NTFS $PARTITION" $LINENO
            rc=$?
            ;;
        
        ext2 | ext3 | ext4)
            run_command "sudo mkfs -t $FORMAT -L $FORMAT -E root_owner=$UID:$GID -F $PARTITION" $LINENO
            rc=$?
            ;;
            
        *)
            ui_error $LINENO "Unknown format '$FORMAT'"
            
    esac

    if (( $rc )); then
        ui_error $LINENO "mkfs failed"
        return 12
    else
        ui_msg "ERASE MEDIA" "~ Formatting complete. '$(media_name $DEVICE)' has been erased." white OK log
    fi

    echo "Mounting the drive..."
    sleep 2
    run_command "udisksctl mount -b $PARTITION" $LINENO
    if (( $? )); then
        ui_error $LINENO "mount failed"
        return 13
    fi
}


media_details(){
    local MEDIA=$1
    local MSG=
    MSG="\n===== Media details ====="
    MSG="$MSG\nMedia: '$(media_name $MEDIA)' \n"

    echo "Searching for Operating Systems..."
    MSG=$MSG"$(media_os $MEDIA)"

    echo "Calculating backup estimates..."
    echo
    MSG="$MSG\n$(media_backup_estimate  $MEDIA)"
    MSG="$MSG\n\n===== PARTITION TABLE DETAILS ===== \n$(sudo parted -s $MEDIA print free) \n\n"
    MSG="$MSG$(lsblk $MEDIA -o maj:min,fssize,fsused,fsavail,fsuse%)\n\n"
    
    ui_msg "MEDIA DETAILS" "$MSG"
}


media_partition_info() {
	local MEDIA=$1
	local PARTITION=$2
	
	local PARTED_OUTPUT=
	local PARTSTART=
	local LOOPBACK=
	local MOUNTDIR=
	
	local OS=
	local ARCH=
	local BITS=
	local READONLY=
	local OVERLAY=
  
    PARTED_OUTPUT=$(sudo parted -ms "$MEDIA" unit B print)
    if (( $? )); then
      return 1
    fi	

    # mount the filesystem
    PARTSTART="$(echo "$PARTED_OUTPUT" | grep ^$PARTITION: | cut -d ':' -f 2 | tr -d 'B')"
    LOOPBACK="$(sudo losetup -f --show -o "$PARTSTART" "$MEDIA")"
    if (( $? )); then
        echo ...retrying...
        sleep 2
        LOOPBACK="$(sudo losetup -f --show -o "$PARTSTART" "$MEDIA")"
        if (( $? )); then
            return 3
        fi  
    fi
    MOUNTDIR=$(mktemp -d)
    sudo mount "$LOOPBACK" "$MOUNTDIR"
    if (( $? )); then
        sudo losetup -d "$LOOPBACK"
        return 4
    fi

  
    # look for OS name and architecture
    if [[ -e $MOUNTDIR/etc/os-release ]]; then
        OS="$(cat $MOUNTDIR/etc/os-release | grep PRETTY_NAME | cut -d= -f2)"
        ARCH="$(file $MOUNTDIR/bin/bash | cut -d, -f2)"
        BITS="$(file $MOUNTDIR/bin/bash | cut -d, -f1)"
        if  [[ !  -z $(echo "$BITS" | grep 32 ) ]]; then
            BITS=32
        elif [[ !  -z $(echo "$BITS" | grep 64 ) ]]; then
            BITS=64
        fi
        if [[ ! $ARCH =~  $BITS ]]; then
            ARCH=$ARCH"-"$BITS
        fi  
        OS="$OS $ARCH" 
    fi
    
    
    # look for windows
    if [[ -e $MOUNTDIR/Windows ]]; then
        OS="'Windows'"
    fi
    
    
	# look for read-only partition (may not be needed)
	if [[ -e $MOUNTDIR/etc/fstab ]]; then
        ROOTREADONLY="$(cat $MOUNTDIR/etc/fstab | grep /boot | grep ,ro )"
        if [[ ! -z $ROOTREADONLY ]]; then
            ROOTREADONLY="(READONLY)"
        fi
    fi
  

	# look for overlay file system
    if [[ -e $MOUNTDIR/cmdline.txt ]]; then
        OVERLAY="$(cat $MOUNTDIR/cmdline.txt | grep boot=overlay )"
    	if [[ ! -z $OVERLAY ]]; then
            OVERLAY="(OVERLAY file system)"
    	fi
    fi	

	# unmount fs and cleanup
	sudo umount "$MOUNTDIR"	
	sudo losetup -d "$LOOPBACK"

	echo "$OS$OVERLAY$ROOTREADONLY"
}


media_os() {
    local MEDIA=$1
    local MSG=

    PARTED_OUTPUT=$(sudo parted -ms $MEDIA print)  # no freespace
    #  MEDIA_PARTITION_TABLE=$(echo "$PARTED_OUTPUT" | head -n 2 | tail -n 1 | cut -d: -f6)   # msdos, gpt, other
    #  MEDIA_PARTITION_COUNT=$(echo "$PARTED_OUTPUT" | grep ^[1-9]: | grep -v ":::;" | cut -d: -f1 | wc -l)
    MEDIA_PARTITIONS=$(echo "$PARTED_OUTPUT" | grep ^[1-9]: | grep -v ":::;" | cut -d: -f1)

    # echo Looking for operating systems on partitions...
    for PARTITION in $MEDIA_PARTITIONS; do
        OS=$(media_partition_info $MEDIA $PARTITION)
        RC=$?
        if [[ $RC = 0 ]] && [[ ! -z $OS ]] ; then
            echo " - '$OS' found on Partition $PARTITION"
        fi
    done
}


 media_backup_estimate() {
    local MEDIA=$1
    local MSG=

    if [[ ! -e $MEDIA ]]; then
        MSG="Error: Media '$MEDIA' does not exist"
        return 1
    fi

    MEDIA_SIZE=$(media_size $MEDIA)
    PARTED_OUTPUT=$(sudo parted -ms $MEDIA print)  # no freespace
    MEDIA_PARTITION_TABLE=$(echo "$PARTED_OUTPUT" | head -n 2 | tail -n 1 | cut -d: -f6)   # msdos, gpt, other
    MEDIA_PARTITION_COUNT=$(echo "$PARTED_OUTPUT" | grep ^[1-9]: | grep -v ":::;" | cut -d: -f1 | wc -l)
    MEDIA_PARTITION_LIST=$(echo "$PARTED_OUTPUT" | grep ^[1-9]: | grep -v ":::;" | cut -d: -f1)
    MEDIA_LAST_PARTITION_NUMBER=$(echo "$PARTED_OUTPUT" | tail -1 | cut -d: -f1)
    MEDIA_LAST_PARTITION_FS=$(echo "$PARTED_OUTPUT" | tail -1 | cut -d: -f5)

    case $MEDIA in
        /dev/sd*)
            MEDIA_LAST_PARTITION_NAME=$MEDIA$MEDIA_LAST_PARTITION_NUMBER
            ;;

        /dev/mmcblk*|/dev/nvme*)
            MEDIA_LAST_PARTITION_NAME=$MEDIA"p"$MEDIA_LAST_PARTITION_NUMBER
            ;;
    esac

    PARTED_OUTPUT=$(sudo parted $MEDIA unit B print free )

    MEDIA_FREESPACE_AT_END=$(echo "$PARTED_OUTPUT" | tail -1 | grep Free | sed 's/[ ]\+/ /g' | cut -d " " -f 4 | tr -d 'B' )
    if [[ -z $MEDIA_FREESPACE_AT_END ]]; then
        MEDIA_FREESPACE_AT_END=0
    fi

    if [[ -z $(echo "$PARTED_OUTPUT" | grep -v Free | tail -1 | sed 's/[ ]\+/ /g' | grep primary) ]]; then
        MEDIA_LAST_PARTITION_TYPE=logical
    else
        MEDIA_LAST_PARTITION_TYPE=primary
    fi

  #  MEDIA_LAST_PARTITION_FS=$(lsblk -no FSTYPE $MEDIA$MEDIA_LAST_PARTITION_NUMBER  )

    MSG=$MSG"\n===== $PRODUCTNAME BACKUP ESTIMATE ===== \n"
    MSG=$MSG"Media size                         =  $(get_bytes $MEDIA_SIZE -h)\n"


    #1 - free space
    MSG=$MSG$(printf '%-35.34s' "Remove '$(get_bytes $MEDIA_FREESPACE_AT_END -h)' of freespace")
    MSG=$MSG"=> $(get_bytes $(($MEDIA_SIZE - MEDIA_FREESPACE_AT_END )) -h ) \n"


    # 2 - is it a complex file system?
    if [[ $MEDIA_PARTITION_COUNT -gt 3 ]]; then
        MSG=$MSG"   Warning: Partitions=$MEDIA_PARTITION_COUNT.  This looks like a complex partition structure and may not shrink. Pisafe will still work.\n"
    fi

  
    # 3 - ext and not logical?
    SHRINK_BYTES=0
    UNCOMPRESSED_BYTES=0
    case $MEDIA_LAST_PARTITION_FS in
    
        ext4|ext3|ext2)
            if [[ $MEDIA_PARTITION_TABLE = gpt ]] || ( [[ $MEDIA_PARTITION_TABLE = msdos ]] && [[ $MEDIA_LAST_PARTITION_TYPE = primary  ]] ) ; then
                SHRINK_BYTES=$(sudo lsblk $MEDIA -lpbo name,fsavail | grep $MEDIA_LAST_PARTITION_NAME | sed 's/^[[:blank:]]*//;s/[ ]\+/ /g'  | cut -d " " -f2)
            else
                MSG=$MSG"   Warning: The last partition type is '$MEDIA_LAST_PARTITION_TYPE'. This partition-type will not shrink and cannot be restored to a smaller media. Pisafe will still work.\n"
            fi
            ;;

        *)
            MSG=$MSG"   Warning: The filesystem on the last partition is '$MEDIA_LAST_PARTITION_FS'. This filesystem will not shrink and cannot be restored to a smaller media. Pisafe will still work.\n"
            ;;
    esac
  
    if [[ -z $SHRINK_BYTES ]]; then
        SHRINK_BYTES=0
    fi
    

    # 4 Shrink Filesystem  
    UNCOMPRESSED_BYTES=$(( $MEDIA_SIZE - $MEDIA_FREESPACE_AT_END - $SHRINK_BYTES ))
    MSG=$MSG$(printf '%-35.34s' "Shrink filesystem by $(get_bytes $SHRINK_BYTES -h) ")
    MSG=$MSG"=> $(get_bytes $UNCOMPRESSED_BYTES -h) \n"


    # 5 Compression
    MSG=$MSG"Compress about 2:1                 => $(get_bytes $((UNCOMPRESSED_BYTES / 2 )) -h) \n"

    echo "$MSG"
}

   

########################################
###  WHIPTAIL GUI FUNCTIONS ##############
########################################

whiptail_calc_wt_size() {
    # NOTE: it's tempting to redirect stderr to /dev/null, so supress error 
    # output from tput. However in this case, tput detects neither stdout or 
    # stderr is a tty and so only gives default 80, 24 values

    WT_HEIGHT=20
    WT_WIDTH=80
    WT_HEIGHT_TALL=$(($(tput lines)-10))
    WT_WIDTH_WIDE=$(($(tput cols)-7))
    
    if [[ $WT_WIDTH_WIDE -gt 120 ]]; then
        WT_WIDTH_WIDE=120
    fi

    if [[ -z $WT_WIDTH ]] || [[ $WT_WIDTH -lt 60 ]]; then
        WT_WIDTH=80
    fi
    if [[ $WT_WIDTH -gt 178 ]]; then
        WT_WIDTH=80
    fi

    WT_MENU_HEIGHT=$(($WT_HEIGHT-7))
    WT_MENU_HEIGHT_TALL=$(($WT_HEIGHT_TALL-7))

    WT_MB_HEIGHT=$WT_HEIGHT
    WT_MB_WIDTH=$WT_WIDTH
}


whiptail_fselect() {
#
#  Arguments
#     1  Dialog title
#     2  Source path to list files and directories
#     3  File mask (by default *)
#     4  "yes" to allow go back in the file system.
#
#  Returns
#     0  if a file was selected and loads the FILE_SELECTED variable 
#        with the selected file.
#     1  if the user cancels.
#
#if whiptail_fselect "Please, select a file" /home/user ; then
#        echo "File Selected: \"$FILE_SELECTED\"."
#else
#        echo "Cancelled!"
#fi
# ----------------------------------------------------------------------

    local TITLE=${1:-$MSG_INFO_TITLE}
    local LOCAL_PATH=${2:-$(pwd)}
    local FILE_MASK=${3:-"*"}
    #local FILE_MASK='( -name "*.img" -o -name "*.zip" -o -name "*.xz" -o -name "*.gz" )'
    local ALLOW_BACK=${4:-no}
    local FILES=()

    [[ $ALLOW_BACK != no ]] && FILES+=(".." "..")

    IFS=$'\t\n'

    FILES=("FILENAME" "     SIZE   (IMAGESIZE)")

    # First add folders      
    for DIR in $(find $LOCAL_PATH -maxdepth 1 -mindepth 1 -name "[!.]*" -type d -printf "%f\t" | sort 2> /dev/null)
    do
        FILES+=($DIR  "     folder")
    done              
                
    # Then add files                                
    for FILE in $(find $LOCAL_PATH -maxdepth 1 \
        \( -name "*.img" -o -name "*.zip" -o -name "*.xz" -o -name "*.gz" -o -name "*.iso" \) \
        -type f \
        -printf "%f\t     %s\n" | sort  2> /dev/null)                                                                  
    do
        FILES+=($FILE)
    done
	unset IFS


    # convert filesizes to human readable and add image size
    num='^[0-9]+$'
    arraylength=${#FILES[@]}
    
    if [[ $arraylength = 0 ]]; then
        FILES=(no files)
    fi
    
    for (( i=0; i<${arraylength}; i++ )); do
		arrayelement=$(echo "${FILES[$i]}" | sed 's/ *//g')
		if [[ $arrayelement =~ $num ]] ; then  
            #FILES[$i]=$(echo "    " $(get_bytes_h $arrayelement -h))
            FILES[$i]=$(echo "    " $(get_bytes $arrayelement -h) \($(file_image_size "$LOCAL_PATH/$PREVIOUS_ELEMENT" -h)\)) 
		else
            PREVIOUS_ELEMENT=$(echo "${FILES[$i]}")
        fi
    done
 
 
    # let user select file
    while true
    do
        FILE_SELECTED=$(whiptail --clear --backtitle "$BACKTITLE" --title "$LOCAL_PATH" \
                                --menu "Choose a file" $WT_HEIGHT_TALL $WT_WIDTH_WIDE $WT_MENU_HEIGHT_TALL "${FILES[@]}"  3>&1 1>&2 2>&3)

        #exit if bad whiptail statement
        FSX=${FILE_SELECTED:0:3}
       # if [ ! -z $FSX ] && [ $FSX = "Box" ]; then
        if [[ ~$FSX = ~Box ]]; then
            echo "ERROR in whiptail in whiptail_fselect.  Maybe a space in a filename?"
			echo "${FILES[@]}"
            exit 1
        fi
        
        if [[ -z $FILE_SELECTED ]]; then
            return 1
        else
            if [[ $FILE_SELECTED = ".." ]] && [[ $ALLOW_BACK != "no" ]]; then
                return 0

            elif [[ -d $LOCAL_PATH/$FILE_SELECTED ]] ; then
                if whiptail_fselect "$TITLE" "$LOCAL_PATH/$FILE_SELECTED" "$FILE_MASK" "yes" ; then
                    if [[ $FILE_SELECTED != ".." ]]; then
                        return 0
                    fi
                else
                    return 1
                fi

            elif [[ -f $LOCAL_PATH/$FILE_SELECTED ]] ; then
                FILE_SELECTED="$LOCAL_PATH/$FILE_SELECTED"
                return 0
            fi
        fi
    done
}


whiptail_countdown(){  
    local MAX=${1:-10}
    local TITLE=${2:-"COUNTDOWN... press any key to stop or 'y' to continue now"}
    local MSG="${3:-Countdown for $MAX seconds.\n\n}"

    for ((i=$MAX; i>=0; i--)) ; do
		TERM=vt220 whiptail --backtitle "$BACKTITLE"  --title "$TITLE" --infobox "$MSG" $WT_MB_HEIGHT $WT_MB_WIDTH
        read -s -t 1 -N 1 INPUT
        if [[ ! -z $INPUT ]]; then
            if [[ $INPUT = y ]]; then
                echo Continuing...
                return 0
            else
              echo $INPUT
              return 2
            fi
        fi 
        MSG=$(echo "$MSG.$i")
    done 
}


echo_if_cli (){
    local MSG=$1
    local COLOR=$2
    if [[ $INTERFACE = cli ]]; then
        case $COLOR in
            white) echo_white $MSG ;;
            red)    echo_red $MSG ;;
            *) echo $MSG ;;
        esac
    fi
}


# ---------- Config_var functions

config_var_set() {
    SETTING=$1
    VAL=$2
    
    case $(config_var_get $SETTING) in
    
        '') # add setting to end of file
            echo "$SETTING"="$VAL" >> $CONFIG 
            ;;
        
        *)  #update setting to val
            sed -i 's~'$SETTING'=.*$~'$SETTING'='$VAL'~' $CONFIG
            ;;
            
    esac
}


config_var_get(){
    SETTING=$1"="
    cat $CONFIG | grep $SETTING | sed 's~'$SETTING'~~'
}


config_var_clear(){
    SETTING=$1
    VAL=$2
    sed -i 's~'$SETTING'=.*$~'$VAR'=~' $CONFIG 
}


config_var_init_configfile(){
    if [[ ! -d $(file_path $CONFIG) ]]; then
        mkdir -p $(file_path $CONFIG)
    fi
    
    if [[ ! -f $CONFIG ]]; then
        touch $CONFIG
        echo "# $CONFIG" > $CONFIG
        config_var_set_defaults
    fi
}


config_var_set_defaults(){
    config_var_init_configfile
    
    config_var_set settings_script_ver $SCRIPTVER 
    config_var_set default_path $HOME/Downloads 
    config_var_set hide_root_device on 
    config_var_set check_for_updates_on_startup on 

#backup settings
    config_var_set shrink_fs on 
    config_var_set auto_expand_fs on 
    config_var_set default_extension zip 
    config_var_set compression_level 1 
    config_var_set parallel_compression on 
    config_var_set large_device_read_warning 17179869184 
    config_var_set skip_freespace on 
    
#restore settings
    config_var_set large_device_write_warning 17179869184 
    config_var_set safety on 

#other    
    config_var_set debug_mode off 
    config_var_set sound on 
    config_var_set log on 
  #  config_var_set log_file $LOG_FILE 
    
    config_var_set text_editor $(env_texteditor) 
}


config_var_get_settings(){
    SETTINGS_SCRIPT_VER=$(config_var_get settings_script_ver)
    DEFAULT_PATH=$(config_var_get default_path)
    HIDE_ROOT_DEVICE=$(config_var_get hide_root_device)
    CHECK_FOR_UPDATES_ON_STARTUP=$(config_var_get check_for_updates_on_startup)
 
    # backup settings
    SHRINK_FS=$(config_var_get shrink_fs)
    AUTO_EXPAND_FS=$(config_var_get auto_expand_fs)
    DEFAULT_EXTENSION=$(config_var_get default_extension)
    COMPRESSION_LEVEL=$(config_var_get compression_level)
    LARGE_DEVICE_READ_WARNING=$(config_var_get large_device_read_warning) 
    SKIP_FREESPACE=$(config_var_get skip_freespace)
    
    # restore settings
    LARGE_DEVICE_WRITE_WARNING=$(config_var_get large_device_write_warning) 
    SAFETY=$(config_var_get safety)  

    # other    
    DEBUG_MODE=$(config_var_get debug_mode)
    SOUND=$(config_var_get sound)
    LOG=$(config_var_get log)
  #  LOG_FILE=$(config_var_get log_file)
    VERIFY=off
    TEXT_EDITOR=$(config_var_get text_editor)
    
    if [[ $INTERFACE != gui ]]; then 
        DEFAULT_PATH=$CURRENT_DIR
      #  HIDE_ROOT_DEVICE=off
    fi
    
    mkdir -p "$DEFAULT_PATH"
}


# ---------- Enviroment functions
env_installer(){
    local INSTALLER=
    if [ -f /usr/bin/apt ]; then             # debian
        INSTALLER="apt install -y"
    elif [ -f /usr/bin/pacman ]; then        # arch
        INSTALLER="pacman -S --noconfirm"
    elif [ -f /usr/bin/dnf ]; then            #rpm / fedora
        INSTALLER="dnf install -y"  
    fi
    echo "$INSTALLER"
}


env_terminal(){
    local TERMINAL1=
    if [ -f /usr/bin/lxterminal ];then
      TERMINAL1="lxterminal --geometry=110x40 --title='PiSafe' -e bash -c "
    elif [ -f /usr/bin/xfce4-terminal ];then
      TERMINAL1="xfce4-terminal --geometry=110x40 --title='PiSafe' -x bash -c "
    elif [ -f /usr/bin/mate-terminal ];then
      TERMINAL1="mate-terminal --geometry=110x40 --title='PiSafe' -x bash -c "
    elif [ -f /usr/bin/gnome-terminal ];then
      TERMINAL1="gnome-terminal --geometry=110x40 --title='PiSafe' -x bash -c "
    elif [ -f /usr/bin/xterm ];then
      TERMINAL1="xterm -geometry 110x40 -T 'PiSafe' -e bash -c " 
    elif [ -f /usr/bin/terminator ];then
      TERMINAL1="terminator --geometry=110x40 -T 'PiSafe' -x bash -c "
    elif [ -f /usr/bin/konsole ];then
      TERMINAL1="konsole -e bash -c " 
    elif [ -f /usr/bin/qterminal ];then
      TERMINAL1="qterminal -e bash -c "   
    elif [ -f /usr/bin/x-terminal-emulator ];then
      TERMINAL1="$(readlink -f /usr/bin/x-terminal-emulator) -e bash -c "
    else
      echo "Failed to locate any terminal emulators!!!"
      return 1
    fi
    echo "$TERMINAL1"
}


env_texteditor(){
    TEXT_EDITORS=" leafpad xed gedit featherpad kwrite pluma kate mousepad geany nano "
    
    for TEXT_EDITOR in $TEXT_EDITORS ; do
        if [[ -f /usr/bin/$TEXT_EDITOR ]]; then
            echo $TEXT_EDITOR
            return
        fi
    done
}


########  MENU  FUNCTIONS ######################

menu_set_compression(){
    CHOICE=$(whiptail --title "SETTINGS-COMPRESSION" --radiolist \
    "Choose compression level (your milage may vary)" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
    "1" "Fastest time (default)" on \
    "2" "" off \
    "3" "" off \
    "4" "" off \
    "5" "" off \
    "6" "" off \
    "7" "" off \
    "8" "" off \
    "9" "Smallest file (MUCH slower)" off   3>&1 1>&2 2>&3 )
   
    if [[ ! -z $CHOICE ]]; then
        COMPRESSION_LEVEL=$CHOICE
        config_var_set compression_level $CHOICE
    fi
}

    
menu_settings_default_path(){
    MSG="Enter new default path   '$DEFAULT_PATH'"
    TEMP_PATH="$DEFAULT_PATH"
    while true; do
        NEWPATH=$(whiptail --backtitle "$BACKTITLE" --title "SETTINGS" --inputbox "$MSG" $WT_HEIGHT $WT_WIDTH "$TEMP_PATH" 3>&1 1>&2 2>&3)
        RC=$?
        if (( $RC )); then
            return $RC
        fi
        
        if [[ ! -z $NEWPATH ]]; then
            if [[ -d $NEWPATH ]]; then
                DEFAULT_PATH=$(echo "$NEWPATH" | sed 's/[/\t]*$//')
                config_var_set default_path $DEFAULT_PATH
                return 0
            else
                #whiptail --title ERROR --msgbox "ERROR Directory '$NEWPATH' does not exist" $WT_MB_HEIGHT $WT_MB_WIDTH
                ui_error $LINENO "ERROR Directory '$NEWPATH' does not exist"
                TEMP_PATH="$NEWPATH"
            fi
        fi
    done
}


menu_settings_default_extension(){
     CHOICE=$(whiptail --backtitle "$BACKTITLE" --title "SETTINGS-EXTENSION" --radiolist \
            "Choose default extension (compression format)" $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
            "zip" "Default" on \
            "xz" "~25% smaller, 3x-4x more time" off \
            "gz" "~25% faster, same size as zip" off  \
            "img" "Twice the size, half the time (No compression)" off 3>&1 1>&2 2>&3 )
    
    if [[ ! -z $CHOICE ]]; then
        DEFAULT_EXTENSION=$CHOICE
        config_var_set default_extension $CHOICE
    fi
}


menu_settings_options(){
    #"hide_mmc_device" "Hide internal sd card (CAUTION)" "$HIDE_MMC_DEVICE" \
    #echo "starting menu_settings_options"

    ON=$(whiptail --title "SETTINGS-OPTIONS" --checklist "Enable options" $WT_HEIGHT  $WT_WIDTH  $WT_MENU_HEIGHT \
    "shrink_fs"         "Shrink filesystem on backup" "$SHRINK_FS" \
    "auto_expand_fs"    "Create shrunk backup that auto-expands" "$AUTO_EXPAND_FS" \
    "hide_root_device"  "Hide root device (CAUTION)" "$HIDE_ROOT_DEVICE" \
    "check_for_updates_on_startup" "" "$CHECK_FOR_UPDATES_ON_STARTUP" \
    "sound"             "enable sounds" "$SOUND" \
    "log"               "log activity" "$LOG" \
    "debug_mode"        " " "$DEBUG_MODE" \
    3>&1 1>&2 2>&3) 
    
    if (( $? )); then
        return
    fi
    
    # dump the quotes in the string.
    ON=$(echo $ON | sed 's/"//g')
    
    # set all to off
    config_var_set shrink_fs off
    config_var_set auto_expand_fs off
    config_var_set hide_root_device off
    config_var_set sound off
    config_var_set log off
    config_var_set debug_mode off
    config_var_set check_for_updates_on_startup off
    
    for SELECTED in $ON; do
        config_var_set $SELECTED on
    done
    config_var_get_settings
}


menu_settings(){
    while true; do
        SELECTION=$(whiptail --backtitle "$BACKTITLE" --title "SETTINGS" --cancel-button "Back" --menu " " $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT  \
        "Default directory   " "$DEFAULT_PATH" \
        "Default extension   " "$DEFAULT_EXTENSION" \
        "Compression         " "$COMPRESSION_LEVEL of 9" \
        "Options             " "Several options to turn on/off " \
        "                    " "      " \
        "Edit settings file  " "Edit the settings file manually (pisafe.conf)" \
        "Factory defaults    " "Reset settings to factory defaults" \
        3>&1 1>&2 2>&3)
        
        RC=$?
        if (( $RC )); then
            return $RC
        else
            case "$SELECTION" in
            "Default d"*)       menu_settings_default_path ;;
            "Default e"*)       menu_settings_default_extension ;;
            "Compression"*)     menu_set_compression ;;
            Text*)              ;;
            Options*)           menu_settings_options ;;

            "    "*)            ;;
            Edit*)              $TEXT_EDITOR $CONFIG 2>/dev/null
                                config_var_get_settings ;;
            Factory*) 
                               if [[ $(ui_yesno "WARNING" "Are you sure you want to reset the settings to factory defaults?" "--defaultno") = y ]]; then
                                    ui_log "Setting $PRODUCTNAME $SCRIPTVER to Factory Defaults"
                                    config_var_set_defaults
                                    config_var_get_settings
                                fi ;;
             *)                 whiptail --msgbox "Programmer error: unrecognized option" $WT_HEIGHT  $WT_WIDTH  $WT_MENU_HEIGHT ;;
            esac
        fi
    done
}


 menu_select_sddevice(){
    TITLE=$1
    HIDE_ROOT_DEVICE_OVERRIDE=$2    # y n or blank
    FIELD_SEPERATOR="|"

    #get list of sd devices and add a field seperator |    
    IFS=$'\n'
    options=($(media_list $2 | sed 's/ / '$FIELD_SEPERATOR' /'))
    RC=$?
    unset IFS
    
    arraylength=${#options[@]} 
    if [[ $arraylength = 0 ]]; then
       # whiptail --backtitle "$BACKTITLE" --title ERROR --msgbox "No media found." $WT_MB_HEIGHT  $WT_MB_WIDTH
       # ui_msg "ERROR" "No media found."
        return 1
    fi

    IFS=$FIELD_SEPERATOR
    DEVICE_SELECTED=$(whiptail --clear --backtitle "$BACKTITLE" --title "$TITLE"\
        --menu "Select media (Hide root = $HIDE_ROOT_DEVICE)" \
        $WT_MB_HEIGHT $WT_MB_WIDTH 10 ""${options[@]}"" 3>&1 1>&2 2>&3)
    RC=$?
    unset IFS   
    if (( $RC )); then
        return $RC
    fi
    
  #  OUTDEV=$DEVICE_SELECTED
  #  INDEV=$DEVICE_SELECTED
    echo $DEVICE_SELECTED
}


menu_get_outfile(){
    OUTFILEDEFAULT="$DEFAULT_PATH/$(date +%Y-%m-%d-pisafe)"
    EXT=$DEFAULT_EXTENSION
    OUTFILE=
           
    MEDIA_OS="$(media_os  $INDEV)"       
           
  #  echo "Calculating backup estimates..."
    ESTIMATES=$(media_backup_estimate $INDEV)         
           
     while true; do   
    
        #get filename
        MSG="$MEDIA_OS \
        \n$ESTIMATES\n===== BACKUP FILENAME ===== \
        \nIf you don't include an extension '.img.$DEFAULT_EXTENSION' will be added \
        \n\nSupported extensions are: .img .zip .xz .gz \
        \n.zip is the baseline \n.img is ~2x faster but twice the size (NOT compressed) \n.xz is ~25% smaller but takes 3x-4x longer \n.gz is ~25% faster \
        \n\nRecommended to have NO SPACES in the name \
        \n\nEnter the image filename (eg: 2020-12-15-buster32)"
        NEWFILE=$(whiptail --backtitle "$BACKTITLE" --title "BACKUP '$(media_name $INDEV)'" --inputbox "$MSG" $WT_HEIGHT_TALL $WT_WIDTH_WIDE "$OUTFILEDEFAULT" 3>&1 1>&2 2>&3)
        RC=$?
        if (( $RC )); then
            return $RC
        fi
    
    
        #fill out variables based on selected filename
        OUTFILEDEFAULT="$NEWFILE"
        OUTFILE="$NEWFILE"
        if [[ ! -z $(file_ext "$OUTFILE") ]]; then
            EXT=$(file_ext "$OUTFILE")
        else    
            EXT=$DEFAULT_EXTENSION
        fi
 
        file_check_outfile
        RC=$?
        if ! (( $RC )); then
            #return $RC
            break  # break out of the while loop
        fi
    done
        
    # add .img.zip if no extension
    if [[ ! -z $OUTFILE ]] && [[ -z $(file_ext $OUTFILE) ]] ; then 
         echo "Adding '.img.$DEFAULT_EXTENSION'"
         OUTFILE=$OUTFILE.img.$DEFAULT_EXTENSION
         #echo "added ext '$OUTFILE'"
    fi
    
    # check and fix outfile name.....
    if [[ $(file_ext "$OUTFILE") = "img" ]] ; then
        OUTFILE=$(file_path_base "$OUTFILE").$(file_ext "$OUTFILE")
    else
        OUTFILE=$(file_path_base "$OUTFILE").img.$(file_ext "$OUTFILE")
    fi    
}


menu_backup(){
    INDEV=$1  #use global vars  
    OUTFILE=$2   #use global vars
    
    #reset auto-expand from config file in case it was turned off temporarily
    AUTO_EXPAND_FS=$(config_var_get auto_expand_fs)
    
    # get INDEV
    # Set global variables INDEV and OUTDEV
    INDEV=$(menu_select_sddevice "BACKUP")
    RC=$?
    if (( $RC )); then
        ui_error $LINENO "No media found."
        return $RC
    fi 
    
    media_check_indev
    RC=$?
    if (( $RC )); then
        return $RC
    fi
    
    # get OUTFILE
    menu_get_outfile
    RC=$?
    if (( $RC )); then
        return $RC
    fi
    

    #confirm to continue
    MSG="Backup '$(media_name $INDEV)' 
        \nto '$OUTFILE'.
        \n\nA good 8GB card with RaspiOS on a Pi4 takes about 11 minutes with zip
        \nand about 8 minutes with gz.
        \nThis will switch to the terminal screen to watch the progress ...
        \n\nCreate backup image-file now?"
    if [[ $(ui_yesno "BACKUP : Create Image-file"  "$MSG"  --defaultno) != y ]]; then
        return 1
    fi


    ###########################################################
    # this next line actually does the work!!  
    media_backup $INDEV "$OUTFILE" "-y" "gui"
    RC=$?
    if (( $RC )); then
        ui_error $LINENO "Error '$RC' in media_backup"
        return $RC
    fi 
    ###########################################################

    # Display results
    whiptail  --backtitle "$BACKTITLE" --title " BACKUP-DONE "  \
        --msgbox "'$(media_name $INDEV)' backed up to 
        \n'$OUTFILE' 
        \ncompressed from '$(media_size $INDEV -h)' to '$(file_size "$OUTFILE" -h)' in $(get_elapsed_time $TIME1 $TIME4) 
        \n\nYou can remove '$(media_name $INDEV)' now. " $WT_MB_HEIGHT $WT_WIDTH
}  


menu_restore() {   
    echo "Getting list of images ready..."
    
    #GET INFILE
    if whiptail_fselect "WRITE : Select an Image-file" "$DEFAULT_PATH" "zip" "no" ; then
    INFILE=$FILE_SELECTED
    else
        return 1
    fi

    file_check_infile
    RC=$?
    if (( $RC )); then
        return $RC
    fi

    
    # GET OUTDEV
    OUTDEV=$(menu_select_sddevice "RESTORE"  y )    # this sets global variable OUTDEV
    RC=$?
    if (( $RC )); then
        ui_error $LINENO "No media found."
        return $RC
    fi 

    media_check_outdev
    RC=$?
    if (( $RC )); then
        return $RC
    fi
    
    # Confirm to continue
    if (whiptail  --backtitle "$BACKTITLE" --title "RESTORE WARNING" --defaultno \
        --yesno "Restore '$INFILE' 
        \nto '$(media_name $OUTDEV)' 
        \n\nALL existing data on '$(media_name $OUTDEV)' - WILL BE ERASED!  
        \nRestore now?" $WT_HEIGHT $WT_WIDTH) then
        #echo "User selected Yes, exit status was $?."
        RESULT="YES"
    else
        #echo "User selected No, exit status was $?."
        RESULT="n"
        return 1
    fi

    #Countdown ... moved to media_restore
 #   do_beep
 #   do_beep
 #   ui_countdown 10 "" "Overwriting '$(media_name $OUTDEV)' in 10 seconds...\n\n"
 #   RC=$?
 #   if (( $RC )); then
 #       whiptail --backtitle "$BACKTITLE" --title "RESTORE" --msgbox "Restore stopped... \n\n a key was pressed. " $WT_MB_HEIGHT $WT_MB_WIDTH
 #       return $RC
 #   fi    
              
    MEDIA_NAME=$(media_name $OUTDEV)          
              
    ###################################################       
    # do the restore
    # the third parameter turns "SILENT" to "-y".  this is because we already checked with the GUI.
    media_restore "$INFILE" $OUTDEV -y gui
    RC=$?
    if (( $RC )); then
        ui_error $LINENO "Error '$RC' in media_restore"
        return $RC
    fi 
    ###################################################

    if [[ $(ui_yesno "RESTORE" "Eject the media from the operating system?" --defaultno) = y ]]; then
        echo "Ejecting the media..."
        sleep 2
        umount $OUTDEV?  2> /dev/null
        sudo eject -s $OUTDEV
        sleep 2
    elif [[ $(ui_yesno "RESTORE" "Mount the media in the operating system?") = y ]]; then
        echo "Mounting the media..."
        sleep 2
        media_mount $OUTDEV
    fi

    #display the results
    whiptail  --backtitle "$BACKTITLE" --title " RESTORE-DONE " \
        --msgbox "'$INFILE' restored to 
        \n'$MEDIA_NAME'
        \nin $(get_elapsed_time $TIME1 $TIME2)" $WT_MB_HEIGHT $WT_WIDTH
}


menu_tools(){
    local SELECTION
    local DEVICE
    local FORMAT
    while true; do
        SELECTION=$(whiptail --backtitle "$BACKTITLE" --title "TOOLS" --cancel-button "Back" --menu " Choose " $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
        "INSTALL"           "Install $PRODUCTNAME into the menu" \
        "UPDATE"            "Check for updates" \
        "UNINSTALL"          "Uninstall $PRODUCTNAME" \
          "  "               "  " \
          "  "              "=== MEDIA TOOLS (beta) ===" \
        "DETAILS"          "Media details" \
        "ERASE"             "Quick format media" \
        "  "               "  " \
        "TERMINAL"          "View the terminal (for debugging)" \
        "LOG"               "View the log file" \
        3>&1 1>&2 2>&3)
        
        RC=$?
        if (( $RC )); then
            return $RC
        else
            case "$SELECTION" in
            INSTALL)    pisafe_install  ;;
            
            UPDATE)     pisafe_update gui ;;
            
            UNINSTALL)  pisafe_uninstall ;;
            
            DETAILS)    
                DEVICE=$(menu_select_sddevice "MEDIA DETAILS")
                if (( $? )); then
                    ui_error $LINENO "No media found."
                    return 1
                fi  
                media_details "$DEVICE"
                ;;
                
            ERASE)                  
                DEVICE=$(menu_select_sddevice "ERASE MEDIA" "y")
                if (( $? )); then
                    ui_error $LINENO "No media found."
                    return 2
                fi
                
                FORMAT=$(whiptail --clear --backtitle "$BACKTITLE" --title "Select format" --ok-button "Select" --cancel-button "Exit" --menu "    " $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
                            "fat32"     "     Most universal format for media under 32GB" \
                            "exfat"     "     Most universal format for media over 32GB and files over 4GB" \
                            "ntfs"      "     Native Windows format" \
                            "ext4"      "     Native Linux format" 3>&1 1>&2 2>&3)
                RC=$?
                if (( $RC )); then
                    return  $RC               
                fi            
                media_format "$DEVICE" "$FORMAT"  
                ;;

            TERMINAL)   read -s -n 1 -p "Press any key to return"  ;;
            
            LOG)        $TEXT_EDITOR $LOG_FILE 2>/dev/null ;;   # the error redirect is because mousepad kicks off a bunch of errors.
            
            HELP)       whiptail --backtitle "$BACKTITLE"  --title "HELP" --scrolltext --msgbox "$(pisafe_help)" $WT_HEIGHT_TALL  $WT_WIDTH_WIDE  ;;
                
            ABOUT)      whiptail --backtitle "$BACKTITLE"  --title "ABOUT" --scrolltext --msgbox "$(pisafe_about)" $WT_HEIGHT_TALL  $WT_WIDTH_WIDE  ;;  
                
            "  ")       ;;     
            
            *)          whiptail --msgbox "Programmer error: unrecognized option" $WT_HEIGHT  $WT_WIDTH  $WT_MENU_HEIGHT ;;
            esac 
        fi
    done
}


menu_splashscreen(){
    INTERFACE="gui"
    
    # install
    if [[ -z $(which $SCRIPTNAME) ]]; then
        pisafe_install
    fi    
    
    # load factory defaults
    if [[ $(get_ver_to_int $SETTINGS_SCRIPT_VER) -lt $(get_ver_to_int $SCRIPTVER) ]]; then
    
        whiptail --backtitle "$BACKTITLE" --title "WELCOME" --yes-button "Load Factory Defaults"\
        --yesno "Welcome to $PRODUCTNAME
        \nMany changes have been made to $PRODUCTNAME and to the settings file.
        \nIt is recommended that you load the factory defaults now.
        \nWhile best attempts have been made to make $PRODUCTNAME reliable... use at your own risk. " \
        $WT_MB_HEIGHT $WT_MB_WIDTH
    
      #  if [ $? = 0 ] ; then
        if ! (( $? )); then
            config_var_factory_reset 
        fi 
    fi
}


menu_gui(){
    INTERFACE="gui"
    config_var_get_settings
    while true
    do
        whiptail_calc_wt_size
        MENU_CHOICE=$(whiptail --clear --backtitle "$BACKTITLE" --title "MAIN MENU" --ok-button "Select" --cancel-button "Exit" --menu "    " $WT_HEIGHT $WT_WIDTH $WT_MENU_HEIGHT \
                "BACKUP"    "   Backup media to an image-file" \
                "RESTORE"   "   Restore media from an image-file" \
                "LIST"      "   List media and image files" \
                "  "        "   " \
                "SETTINGS"  "   Change settings" \
                "TOOLS"     "   Various tools"\
                 "  "        "   " \
                 "HELP"     "   Help"\
                 "ABOUT"    "   About $PRODUCTNAME"\
                3>&1 1>&2 2>&3)
 
        whiptail_calc_wt_size        
        case $MENU_CHOICE in
            BACKUP)         menu_backup   ;;
            
            RESTORE)        menu_restore  ;;
            
            LIST)           echo "Getting list of images ready..."
                            ui_msg LIST "$(do_list_info $DEFAULT_PATH)"  ;;
            
            SETTINGS)       menu_settings    ;;
            
            TOOLS)          menu_tools       ;;
            
            HELP)           ui_msg HELP "$(pisafe_help)" ;;
            
            ABOUT)          ui_msg ABOUT "$(pisafe_about)"  ;;     
             
            "  "*)          ;;
            
            * )             return       ;;
        esac
    done
}


menu_cli(){
    INTERFACE="cli"
    case $1 in
        
        backup|read)        media_backup $2 $3 $4  ;;
        
        restore|write)      media_restore $2 $3 $4  ;;
        
        list)               do_list_info  ;;

        install)            pisafe_install $2 ;;
            
        update)             pisafe_update cli yes $2   ;;
        
        uninstall)          pisafe_uninstall $2 ;;
            
        log)                nano $LOG_FILE  ;;
            
        config)             nano $CONFIG    ;;
            
        details)            media_details $2  ;;

        erase|format)       media_format $2 $3 $4 ;;
            
        beep)
            SOUND=on
            echo beep ; do_beep ; sleep 2
            echo beep_down ; do_beep_down ; sleep 2
            echo beep_up ;  do_beep_up;;
        
        help|-h|--h)        pisafe_help  ;;
        
        -v)                 echo $SCRIPTVER  ;;
        
        "")                 menu_gui  ;;
        
        *)                  pisafe_help  ;;
    esac
}



##########################################################

# if -v, show version and exit
if  [[ ~$1 = ~-v ]]; then
    echo $SCRIPTVER
    exit
fi

# if uninstalling, uninstall and exit
if [[ ~$1 = ~uninstall ]]; then
    pisafe_uninstall $2
    exit
fi


config_var_init_configfile
config_var_get_settings
pisafe_install_tools


if  [[ $CHECK_FOR_UPDATES_ON_STARTUP = on ]]; then
    pisafe_update cli no 
fi

menu_cli $1 $2 $3 $4
